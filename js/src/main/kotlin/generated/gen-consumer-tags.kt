package html4k.js

import html4k.*
import html4k.impl.*
import html4k.attributes.*
import org.w3c.dom.*

/*******************************************************************************
    DO NOT EDIT
    This file was generated by module generate
*******************************************************************************/

public fun TagConsumer<HTMLElement>.a(href : String? = null, target : String? = null, classes : String? = null, block : A.() -> Unit = {}) : HTMLAnchorElement = build(listOf("href" to href,"target" to target,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildA, block).finalize() as HTMLAnchorElement

public fun TagConsumer<HTMLElement>.abbr(classes : String? = null, block : ABBR.() -> Unit = {}) : HTMLElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildABBR, block).finalize()

public fun TagConsumer<HTMLElement>.address(classes : String? = null, block : ADDRESS.() -> Unit = {}) : HTMLElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildADDRESS, block).finalize()

public fun TagConsumer<HTMLElement>.area(shape : AreaShape? = null, alt : String? = null, classes : String? = null, block : AREA.() -> Unit = {}) : HTMLAreaElement = build(listOf("Shape" to shape?.enumEncode(),"alt" to alt,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildAREA, block).finalize() as HTMLAreaElement

public fun TagConsumer<HTMLElement>.article(classes : String? = null, block : ARTICLE.() -> Unit = {}) : HTMLElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildARTICLE, block).finalize()

public fun TagConsumer<HTMLElement>.aside(classes : String? = null, block : ASIDE.() -> Unit = {}) : HTMLElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildASIDE, block).finalize()

public fun TagConsumer<HTMLElement>.audio(classes : String? = null, block : AUDIO.() -> Unit = {}) : HTMLAudioElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildAUDIO, block).finalize() as HTMLAudioElement

public fun TagConsumer<HTMLElement>.b(classes : String? = null, block : B.() -> Unit = {}) : HTMLElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildB, block).finalize()

public fun TagConsumer<HTMLElement>.base(classes : String? = null, block : BASE.() -> Unit = {}) : HTMLBaseElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildBASE, block).finalize() as HTMLBaseElement

public fun TagConsumer<HTMLElement>.bdi(classes : String? = null, block : BDI.() -> Unit = {}) : HTMLElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildBDI, block).finalize()

public fun TagConsumer<HTMLElement>.bdo(classes : String? = null, block : BDO.() -> Unit = {}) : HTMLElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildBDO, block).finalize()

public fun TagConsumer<HTMLElement>.blockQuote(classes : String? = null, block : BLOCKQUOTE.() -> Unit = {}) : HTMLElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildBLOCKQUOTE, block).finalize()

public fun TagConsumer<HTMLElement>.body(classes : String? = null, block : BODY.() -> Unit = {}) : HTMLBodyElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildBODY, block).finalize() as HTMLBodyElement

public fun TagConsumer<HTMLElement>.br(classes : String? = null, block : BR.() -> Unit = {}) : HTMLBRElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildBR, block).finalize() as HTMLBRElement

public fun TagConsumer<HTMLElement>.button(formEncType : ButtonFormEncType? = null, formMethod : ButtonFormMethod? = null, type : ButtonType? = null, classes : String? = null, block : BUTTON.() -> Unit = {}) : HTMLButtonElement = build(listOf("formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"type" to type?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildBUTTON, block).finalize() as HTMLButtonElement

public fun TagConsumer<HTMLElement>.canvas(classes : String? = null, content : String = "") : HTMLCanvasElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildCANVAS, {+content}).finalize() as HTMLCanvasElement
public fun TagConsumer<HTMLElement>.canvas(classes : String? = null, block : CANVAS.() -> Unit = {}) : HTMLCanvasElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildCANVAS, block).finalize() as HTMLCanvasElement

public fun TagConsumer<HTMLElement>.caption(classes : String? = null, block : CAPTION.() -> Unit = {}) : HTMLElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildCAPTION, block).finalize()

public fun TagConsumer<HTMLElement>.cite(classes : String? = null, block : CITE.() -> Unit = {}) : HTMLElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildCITE, block).finalize()

public fun TagConsumer<HTMLElement>.code(classes : String? = null, block : CODE.() -> Unit = {}) : HTMLElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildCODE, block).finalize()

public fun TagConsumer<HTMLElement>.col(classes : String? = null, block : COL.() -> Unit = {}) : HTMLElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildCOL, block).finalize()

public fun TagConsumer<HTMLElement>.colGroup(classes : String? = null, block : COLGROUP.() -> Unit = {}) : HTMLElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildCOLGROUP, block).finalize()

public fun TagConsumer<HTMLElement>.command(type : CommandType? = null, classes : String? = null, block : COMMAND.() -> Unit = {}) : HTMLElement = build(listOf("type" to type?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildCOMMAND, block).finalize()

public fun TagConsumer<HTMLElement>.dataList(classes : String? = null, block : DATALIST.() -> Unit = {}) : HTMLDataListElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildDATALIST, block).finalize() as HTMLDataListElement

public fun TagConsumer<HTMLElement>.dd(classes : String? = null, block : DD.() -> Unit = {}) : HTMLElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildDD, block).finalize()

public fun TagConsumer<HTMLElement>.del(classes : String? = null, block : DEL.() -> Unit = {}) : HTMLElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildDEL, block).finalize()

public fun TagConsumer<HTMLElement>.details(classes : String? = null, block : DETAILS.() -> Unit = {}) : HTMLDetailsElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildDETAILS, block).finalize() as HTMLDetailsElement

public fun TagConsumer<HTMLElement>.dfn(classes : String? = null, block : DFN.() -> Unit = {}) : HTMLElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildDFN, block).finalize()

public fun TagConsumer<HTMLElement>.dialog(classes : String? = null, block : DIALOG.() -> Unit = {}) : HTMLDialogElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildDIALOG, block).finalize() as HTMLDialogElement

public fun TagConsumer<HTMLElement>.div(classes : String? = null, block : DIV.() -> Unit = {}) : HTMLDivElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildDIV, block).finalize() as HTMLDivElement

public fun TagConsumer<HTMLElement>.dl(classes : String? = null, block : DL.() -> Unit = {}) : HTMLElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildDL, block).finalize()

public fun TagConsumer<HTMLElement>.dt(classes : String? = null, block : DT.() -> Unit = {}) : HTMLElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildDT, block).finalize()

public fun TagConsumer<HTMLElement>.em(classes : String? = null, block : EM.() -> Unit = {}) : HTMLElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildEM, block).finalize()

public fun TagConsumer<HTMLElement>.embed(classes : String? = null, block : EMBED.() -> Unit = {}) : HTMLEmbedElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildEMBED, block).finalize() as HTMLEmbedElement

public fun TagConsumer<HTMLElement>.fieldSet(classes : String? = null, block : FIELDSET.() -> Unit = {}) : HTMLFieldSetElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildFIELDSET, block).finalize() as HTMLFieldSetElement

public fun TagConsumer<HTMLElement>.figure(classes : String? = null, block : FIGURE.() -> Unit = {}) : HTMLElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildFIGURE, block).finalize()

public fun TagConsumer<HTMLElement>.footer(classes : String? = null, block : FOOTER.() -> Unit = {}) : HTMLElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildFOOTER, block).finalize()

public fun TagConsumer<HTMLElement>.form(action : String? = null, encType : FormEncType? = null, method : FormMethod? = null, classes : String? = null, block : FORM.() -> Unit = {}) : HTMLFormElement = build(listOf("action" to action,"enctype" to encType?.enumEncode(),"method" to method?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildFORM, block).finalize() as HTMLFormElement

public fun TagConsumer<HTMLElement>.h1(classes : String? = null, block : H1.() -> Unit = {}) : HTMLHeadingElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildH1, block).finalize() as HTMLHeadingElement

public fun TagConsumer<HTMLElement>.h2(classes : String? = null, block : H2.() -> Unit = {}) : HTMLHeadingElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildH2, block).finalize() as HTMLHeadingElement

public fun TagConsumer<HTMLElement>.h3(classes : String? = null, block : H3.() -> Unit = {}) : HTMLHeadingElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildH3, block).finalize() as HTMLHeadingElement

public fun TagConsumer<HTMLElement>.h4(classes : String? = null, block : H4.() -> Unit = {}) : HTMLHeadingElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildH4, block).finalize() as HTMLHeadingElement

public fun TagConsumer<HTMLElement>.h5(classes : String? = null, block : H5.() -> Unit = {}) : HTMLHeadingElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildH5, block).finalize() as HTMLHeadingElement

public fun TagConsumer<HTMLElement>.h6(classes : String? = null, block : H6.() -> Unit = {}) : HTMLHeadingElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildH6, block).finalize() as HTMLHeadingElement

public fun TagConsumer<HTMLElement>.head(block : HEAD.() -> Unit = {}) : HTMLHeadElement = build(emptyMap, ::buildHEAD, block).finalize() as HTMLHeadElement

public fun TagConsumer<HTMLElement>.header(classes : String? = null, block : HEADER.() -> Unit = {}) : HTMLElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildHEADER, block).finalize()

public fun TagConsumer<HTMLElement>.hGroup(classes : String? = null, block : HGROUP.() -> Unit = {}) : HTMLElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildHGROUP, block).finalize()

public fun TagConsumer<HTMLElement>.hr(classes : String? = null, block : HR.() -> Unit = {}) : HTMLHRElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildHR, block).finalize() as HTMLHRElement

public fun TagConsumer<HTMLElement>.html(block : HTML.() -> Unit = {}) : HTMLHtmlElement = build(emptyMap, ::buildHTML, block).finalize() as HTMLHtmlElement

public fun TagConsumer<HTMLElement>.i(classes : String? = null, block : I.() -> Unit = {}) : HTMLElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildI, block).finalize()

public fun TagConsumer<HTMLElement>.iframe(sandbox : IframeSandbox? = null, classes : String? = null, content : String = "") : HTMLElement = build(listOf("sandbox" to sandbox?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildIFRAME, {+content}).finalize()
public fun TagConsumer<HTMLElement>.iframe(sandbox : IframeSandbox? = null, classes : String? = null, block : IFRAME.() -> Unit = {}) : HTMLElement = build(listOf("sandbox" to sandbox?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildIFRAME, block).finalize()

public fun TagConsumer<HTMLElement>.img(alt : String? = null, src : String? = null, classes : String? = null, block : IMG.() -> Unit = {}) : HTMLImageElement = build(listOf("alt" to alt,"src" to src,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildIMG, block).finalize() as HTMLImageElement

public fun TagConsumer<HTMLElement>.input(type : InputType? = null, formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : HTMLInputElement = build(listOf("type" to type?.enumEncode(),"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildINPUT, block).finalize() as HTMLInputElement

public fun TagConsumer<HTMLElement>.ins(classes : String? = null, block : INS.() -> Unit = {}) : HTMLElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildINS, block).finalize()

public fun TagConsumer<HTMLElement>.kbd(classes : String? = null, block : KBD.() -> Unit = {}) : HTMLElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildKBD, block).finalize()

public fun TagConsumer<HTMLElement>.keyGen(keyType : KeyGenKeyType? = null, classes : String? = null, block : KEYGEN.() -> Unit = {}) : HTMLElement = build(listOf("keytype" to keyType?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildKEYGEN, block).finalize()

public fun TagConsumer<HTMLElement>.label(classes : String? = null, block : LABEL.() -> Unit = {}) : HTMLLabelElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildLABEL, block).finalize() as HTMLLabelElement

public fun TagConsumer<HTMLElement>.legEnd(classes : String? = null, block : LEGEND.() -> Unit = {}) : HTMLElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildLEGEND, block).finalize()

public fun TagConsumer<HTMLElement>.li(classes : String? = null, block : LI.() -> Unit = {}) : HTMLLIElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildLI, block).finalize() as HTMLLIElement

public fun TagConsumer<HTMLElement>.link(href : String? = null, rel : String? = null, block : LINK.() -> Unit = {}) : HTMLLinkElement = build(listOf("href" to href,"rel" to rel).toAttributesMap(), ::buildLINK, block).finalize() as HTMLLinkElement

public fun TagConsumer<HTMLElement>.map(name : String? = null, classes : String? = null, block : MAP.() -> Unit = {}) : HTMLMapElement = build(listOf("name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildMAP, block).finalize() as HTMLMapElement

public fun TagConsumer<HTMLElement>.mark(classes : String? = null, block : MARK.() -> Unit = {}) : HTMLElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildMARK, block).finalize()

public fun TagConsumer<HTMLElement>.math(classes : String? = null, block : MATH.() -> Unit = {}) : HTMLElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildMATH, block).finalize()

public fun TagConsumer<HTMLElement>.mathml(classes : String? = null, content : String = "") : HTMLElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildMATHML, {+content}).finalize()
public fun TagConsumer<HTMLElement>.mathml(classes : String? = null, block : MATHML.() -> Unit = {}) : HTMLElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildMATHML, block).finalize()

public fun TagConsumer<HTMLElement>.menu(type : MenuType? = null, classes : String? = null, block : MENU.() -> Unit = {}) : HTMLMenuElement = build(listOf("type" to type?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildMENU, block).finalize() as HTMLMenuElement

public fun TagConsumer<HTMLElement>.meta(name : String? = null, content : String? = null, block : META.() -> Unit = {}) : HTMLMetaElement = build(listOf("name" to name,"content" to content).toAttributesMap(), ::buildMETA, block).finalize() as HTMLMetaElement

public fun TagConsumer<HTMLElement>.meter(classes : String? = null, block : METER.() -> Unit = {}) : HTMLMeterElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildMETER, block).finalize() as HTMLMeterElement

public fun TagConsumer<HTMLElement>.nav(classes : String? = null, block : NAV.() -> Unit = {}) : HTMLElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildNAV, block).finalize()

public fun TagConsumer<HTMLElement>.noScript(classes : String? = null, block : NOSCRIPT.() -> Unit = {}) : HTMLElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildNOSCRIPT, block).finalize()

public fun TagConsumer<HTMLElement>.object_(classes : String? = null, block : OBJECT_.() -> Unit = {}) : HTMLElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildOBJECT_, block).finalize()

public fun TagConsumer<HTMLElement>.ol(classes : String? = null, block : OL.() -> Unit = {}) : HTMLElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildOL, block).finalize()

public fun TagConsumer<HTMLElement>.optGroup(label : String? = null, classes : String? = null, block : OPTGROUP.() -> Unit = {}) : HTMLOptGroupElement = build(listOf("label" to label,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildOPTGROUP, block).finalize() as HTMLOptGroupElement

public fun TagConsumer<HTMLElement>.option(classes : String? = null, content : String = "") : HTMLOptionElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildOPTION, {+content}).finalize() as HTMLOptionElement
public fun TagConsumer<HTMLElement>.option(classes : String? = null, block : OPTION.() -> Unit = {}) : HTMLOptionElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildOPTION, block).finalize() as HTMLOptionElement

public fun TagConsumer<HTMLElement>.output(classes : String? = null, block : OUTPUT.() -> Unit = {}) : HTMLOutputElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildOUTPUT, block).finalize() as HTMLOutputElement

public fun TagConsumer<HTMLElement>.p(classes : String? = null, block : P.() -> Unit = {}) : HTMLParagraphElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildP, block).finalize() as HTMLParagraphElement

public fun TagConsumer<HTMLElement>.param(name : String? = null, value : String? = null, block : PARAM.() -> Unit = {}) : HTMLParamElement = build(listOf("name" to name,"value" to value).toAttributesMap(), ::buildPARAM, block).finalize() as HTMLParamElement

public fun TagConsumer<HTMLElement>.pre(classes : String? = null, block : PRE.() -> Unit = {}) : HTMLPreElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildPRE, block).finalize() as HTMLPreElement

public fun TagConsumer<HTMLElement>.progress(classes : String? = null, block : PROGRESS.() -> Unit = {}) : HTMLProgressElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildPROGRESS, block).finalize() as HTMLProgressElement

public fun TagConsumer<HTMLElement>.q(classes : String? = null, block : Q.() -> Unit = {}) : HTMLElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildQ, block).finalize()

public fun TagConsumer<HTMLElement>.rp(classes : String? = null, block : RP.() -> Unit = {}) : HTMLElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildRP, block).finalize()

public fun TagConsumer<HTMLElement>.rt(classes : String? = null, block : RT.() -> Unit = {}) : HTMLElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildRT, block).finalize()

public fun TagConsumer<HTMLElement>.ruby(classes : String? = null, block : RUBY.() -> Unit = {}) : HTMLElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildRUBY, block).finalize()

public fun TagConsumer<HTMLElement>.samp(classes : String? = null, block : SAMP.() -> Unit = {}) : HTMLElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildSAMP, block).finalize()

public fun TagConsumer<HTMLElement>.script(type : ScriptType? = null, src : String? = null, content : String = "") : HTMLScriptElement = build(listOf("type" to type?.enumEncode(),"src" to src).toAttributesMap(), ::buildSCRIPT, {+content}).finalize() as HTMLScriptElement
public fun TagConsumer<HTMLElement>.script(type : ScriptType? = null, src : String? = null, block : SCRIPT.() -> Unit = {}) : HTMLScriptElement = build(listOf("type" to type?.enumEncode(),"src" to src).toAttributesMap(), ::buildSCRIPT, block).finalize() as HTMLScriptElement

public fun TagConsumer<HTMLElement>.section(classes : String? = null, block : SECTION.() -> Unit = {}) : HTMLElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildSECTION, block).finalize()

public fun TagConsumer<HTMLElement>.select(classes : String? = null, block : SELECT.() -> Unit = {}) : HTMLSelectElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildSELECT, block).finalize() as HTMLSelectElement

public fun TagConsumer<HTMLElement>.small(classes : String? = null, block : SMALL.() -> Unit = {}) : HTMLElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildSMALL, block).finalize()

public fun TagConsumer<HTMLElement>.source(classes : String? = null, block : SOURCE.() -> Unit = {}) : HTMLSourceElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildSOURCE, block).finalize() as HTMLSourceElement

public fun TagConsumer<HTMLElement>.span(classes : String? = null, block : SPAN.() -> Unit = {}) : HTMLSpanElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildSPAN, block).finalize() as HTMLSpanElement

public fun TagConsumer<HTMLElement>.strong(classes : String? = null, block : STRONG.() -> Unit = {}) : HTMLElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildSTRONG, block).finalize()

public fun TagConsumer<HTMLElement>.style(type : String? = null, content : String = "") : HTMLStyleElement = build(listOf("type" to type).toAttributesMap(), ::buildSTYLE, {+content}).finalize() as HTMLStyleElement
public fun TagConsumer<HTMLElement>.style(type : String? = null, block : STYLE.() -> Unit = {}) : HTMLStyleElement = build(listOf("type" to type).toAttributesMap(), ::buildSTYLE, block).finalize() as HTMLStyleElement

public fun TagConsumer<HTMLElement>.sub(classes : String? = null, block : SUB.() -> Unit = {}) : HTMLElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildSUB, block).finalize()

public fun TagConsumer<HTMLElement>.sup(classes : String? = null, block : SUP.() -> Unit = {}) : HTMLElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildSUP, block).finalize()

public fun TagConsumer<HTMLElement>.svg(classes : String? = null, content : String = "") : HTMLElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildSVG, {+content}).finalize()
public fun TagConsumer<HTMLElement>.svg(classes : String? = null, block : SVG.() -> Unit = {}) : HTMLElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildSVG, block).finalize()

public fun TagConsumer<HTMLElement>.table(classes : String? = null, block : TABLE.() -> Unit = {}) : HTMLTableElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildTABLE, block).finalize() as HTMLTableElement

public fun TagConsumer<HTMLElement>.tbody(classes : String? = null, block : TBODY.() -> Unit = {}) : HTMLTableSectionElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildTBODY, block).finalize() as HTMLTableSectionElement

public fun TagConsumer<HTMLElement>.td(classes : String? = null, block : TD.() -> Unit = {}) : HTMLTableCellElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildTD, block).finalize() as HTMLTableCellElement

public fun TagConsumer<HTMLElement>.textArea(rows : String? = null, cols : String? = null, wrap : TextAreaWrap? = null, classes : String? = null, content : String = "") : HTMLTextAreaElement = build(listOf("rows" to rows,"cols" to cols,"wrap" to wrap?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildTEXTAREA, {+content}).finalize() as HTMLTextAreaElement
public fun TagConsumer<HTMLElement>.textArea(rows : String? = null, cols : String? = null, wrap : TextAreaWrap? = null, classes : String? = null, block : TEXTAREA.() -> Unit = {}) : HTMLTextAreaElement = build(listOf("rows" to rows,"cols" to cols,"wrap" to wrap?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildTEXTAREA, block).finalize() as HTMLTextAreaElement

public fun TagConsumer<HTMLElement>.tfoot(classes : String? = null, block : TFOOT.() -> Unit = {}) : HTMLTableSectionElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildTFOOT, block).finalize() as HTMLTableSectionElement

public fun TagConsumer<HTMLElement>.th(scope : ThScope? = null, classes : String? = null, block : TH.() -> Unit = {}) : HTMLTableColElement = build(listOf("scope" to scope?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildTH, block).finalize() as HTMLTableColElement

public fun TagConsumer<HTMLElement>.thead(classes : String? = null, block : THEAD.() -> Unit = {}) : HTMLTableSectionElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildTHEAD, block).finalize() as HTMLTableSectionElement

public fun TagConsumer<HTMLElement>.time(classes : String? = null, block : TIME.() -> Unit = {}) : HTMLTimeElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildTIME, block).finalize() as HTMLTimeElement

public fun TagConsumer<HTMLElement>.title(content : String = "") : HTMLTitleElement = build(emptyMap, ::buildTITLE, {+content}).finalize() as HTMLTitleElement
public fun TagConsumer<HTMLElement>.title(block : TITLE.() -> Unit = {}) : HTMLTitleElement = build(emptyMap, ::buildTITLE, block).finalize() as HTMLTitleElement

public fun TagConsumer<HTMLElement>.tr(classes : String? = null, block : TR.() -> Unit = {}) : HTMLTableRowElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildTR, block).finalize() as HTMLTableRowElement

public fun TagConsumer<HTMLElement>.ul(classes : String? = null, block : UL.() -> Unit = {}) : HTMLElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildUL, block).finalize()

public fun TagConsumer<HTMLElement>.var_(classes : String? = null, block : VAR_.() -> Unit = {}) : HTMLElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildVAR_, block).finalize()

public fun TagConsumer<HTMLElement>.video(classes : String? = null, block : VIDEO.() -> Unit = {}) : HTMLVideoElement = build(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), ::buildVIDEO, block).finalize() as HTMLVideoElement


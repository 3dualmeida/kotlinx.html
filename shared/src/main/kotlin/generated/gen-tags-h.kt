package html4k

import html4k.*
import html4k.impl.*
import html4k.attributes.*

/*******************************************************************************
    DO NOT EDIT
    This file was generated by module generate
*******************************************************************************/

public open class H1(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("h1", consumer, initialAttributes), CommonAttributeGroupFacade, PhrasingContent {

}

public open class H2(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("h2", consumer, initialAttributes), CommonAttributeGroupFacade, PhrasingContent {

}

public open class H3(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("h3", consumer, initialAttributes), CommonAttributeGroupFacade, PhrasingContent {

}

public open class H4(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("h4", consumer, initialAttributes), CommonAttributeGroupFacade, PhrasingContent {

}

public open class H5(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("h5", consumer, initialAttributes), CommonAttributeGroupFacade, PhrasingContent {

}

public open class H6(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("h6", consumer, initialAttributes), CommonAttributeGroupFacade, PhrasingContent {

}

public open class HEAD(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("head", consumer, initialAttributes), CommonAttributeGroupFacade, MetaDataContent {

}

public open class HEADER(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("header", consumer, initialAttributes), CommonAttributeGroupFacade, FlowContent {

}

public open class HGROUP(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("hgroup", consumer, initialAttributes), CommonAttributeGroupFacade {

}
fun HGROUP.h1(classes : String? = null, block : H1.() -> Unit) : Unit = buildH1(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun HGROUP.h2(classes : String? = null, block : H2.() -> Unit) : Unit = buildH2(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun HGROUP.h3(classes : String? = null, block : H3.() -> Unit) : Unit = buildH3(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun HGROUP.h4(classes : String? = null, block : H4.() -> Unit) : Unit = buildH4(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun HGROUP.h5(classes : String? = null, block : H5.() -> Unit) : Unit = buildH5(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun HGROUP.h6(classes : String? = null, block : H6.() -> Unit) : Unit = buildH6(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)


public open class HR(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("hr", consumer, initialAttributes), CommonAttributeGroupFacade {

}

public open class HTML(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("html", consumer, initialAttributes), CommonAttributeGroupFacade {
    var manifest : String
        get()  = attributeStringString.get(this, "manifest")
        set(newValue) {attributeStringString.set(this, "manifest", newValue)}


}
fun HTML.body(classes : String? = null, block : BODY.() -> Unit) : Unit = buildBODY(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun HTML.head(classes : String? = null, block : HEAD.() -> Unit) : Unit = buildHEAD(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)



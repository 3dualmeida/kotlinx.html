package html4k

import html4k.*
import html4k.impl.*
import html4k.attributes.*

/*******************************************************************************
    DO NOT EDIT
    This file was generated by module generate
*******************************************************************************/

public interface FlowContent : Tag {
}

public interface HeadingContent : Tag {
}

public interface InteractiveContent : Tag {
}

public interface MetaDataContent : Tag {
}

public interface PhrasingContent : Tag {
}

public interface SectioningContent : Tag {
}

fun FlowContent.a(href : String? = null, target : String? = null, classes : String? = null, block : A.() -> Unit) : Unit = buildA(listOf("href" to href,"target" to target,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.abbr(classes : String? = null, block : ABBR.() -> Unit) : Unit = buildABBR(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.area(shape : AreaShape? = null, alt : String? = null, classes : String? = null, block : AREA.() -> Unit) : Unit = buildAREA(listOf("Shape" to shape?.enumEncode(),"alt" to alt,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.area(shape : AreaShape? = null, alt : String? = null, classes : String? = null, content : String = "") : Unit = buildAREA(listOf("Shape" to shape?.enumEncode(),"alt" to alt,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun FlowContent.rectArea(alt : String? = null, classes : String? = null, block : AREA.() -> Unit) : Unit = buildAREA(listOf("Shape" to AreaShape.rect.realValue,"alt" to alt,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.circleArea(alt : String? = null, classes : String? = null, block : AREA.() -> Unit) : Unit = buildAREA(listOf("Shape" to AreaShape.circle.realValue,"alt" to alt,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.polyArea(alt : String? = null, classes : String? = null, block : AREA.() -> Unit) : Unit = buildAREA(listOf("Shape" to AreaShape.poly.realValue,"alt" to alt,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.defaultArea(alt : String? = null, classes : String? = null, block : AREA.() -> Unit) : Unit = buildAREA(listOf("Shape" to AreaShape.default.realValue,"alt" to alt,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.rectArea(alt : String? = null, classes : String? = null, content : String = "") : Unit = buildAREA(listOf("Shape" to AreaShape.rect.realValue,"alt" to alt,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun FlowContent.circleArea(alt : String? = null, classes : String? = null, content : String = "") : Unit = buildAREA(listOf("Shape" to AreaShape.circle.realValue,"alt" to alt,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun FlowContent.polyArea(alt : String? = null, classes : String? = null, content : String = "") : Unit = buildAREA(listOf("Shape" to AreaShape.poly.realValue,"alt" to alt,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun FlowContent.defaultArea(alt : String? = null, classes : String? = null, content : String = "") : Unit = buildAREA(listOf("Shape" to AreaShape.default.realValue,"alt" to alt,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})

fun FlowContent.address(classes : String? = null, block : ADDRESS.() -> Unit) : Unit = buildADDRESS(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.article(classes : String? = null, block : ARTICLE.() -> Unit) : Unit = buildARTICLE(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.aside(classes : String? = null, block : ASIDE.() -> Unit) : Unit = buildASIDE(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.audio(classes : String? = null, block : AUDIO.() -> Unit) : Unit = buildAUDIO(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.b(classes : String? = null, block : B.() -> Unit) : Unit = buildB(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.bdi(classes : String? = null, block : BDI.() -> Unit) : Unit = buildBDI(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.blockQuote(classes : String? = null, block : BLOCKQUOTE.() -> Unit) : Unit = buildBLOCKQUOTE(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.bdo(classes : String? = null, block : BDO.() -> Unit) : Unit = buildBDO(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.br(classes : String? = null, block : BR.() -> Unit) : Unit = buildBR(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.br(classes : String? = null, content : String = "") : Unit = buildBR(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})

fun FlowContent.button(formEncType : ButtonFormEncType? = null, formMethod : ButtonFormMethod? = null, type : ButtonType? = null, classes : String? = null, block : BUTTON.() -> Unit) : Unit = buildBUTTON(listOf("formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"type" to type?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.getButton(formEncType : ButtonFormEncType? = null, type : ButtonType? = null, classes : String? = null, block : BUTTON.() -> Unit) : Unit = buildBUTTON(listOf("formenctype" to formEncType?.enumEncode(),"formmethod" to ButtonFormMethod.get.realValue,"type" to type?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.postButton(formEncType : ButtonFormEncType? = null, type : ButtonType? = null, classes : String? = null, block : BUTTON.() -> Unit) : Unit = buildBUTTON(listOf("formenctype" to formEncType?.enumEncode(),"formmethod" to ButtonFormMethod.post.realValue,"type" to type?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.putButton(formEncType : ButtonFormEncType? = null, type : ButtonType? = null, classes : String? = null, block : BUTTON.() -> Unit) : Unit = buildBUTTON(listOf("formenctype" to formEncType?.enumEncode(),"formmethod" to ButtonFormMethod.put.realValue,"type" to type?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.deleteButton(formEncType : ButtonFormEncType? = null, type : ButtonType? = null, classes : String? = null, block : BUTTON.() -> Unit) : Unit = buildBUTTON(listOf("formenctype" to formEncType?.enumEncode(),"formmethod" to ButtonFormMethod.delete.realValue,"type" to type?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.canvas(classes : String? = null, block : CANVAS.() -> Unit) : Unit = buildCANVAS(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.canvas(classes : String? = null, content : String = "") : Unit = buildCANVAS(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})

fun FlowContent.cite(classes : String? = null, block : CITE.() -> Unit) : Unit = buildCITE(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.code(classes : String? = null, block : CODE.() -> Unit) : Unit = buildCODE(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.command(type : CommandType? = null, classes : String? = null, block : COMMAND.() -> Unit) : Unit = buildCOMMAND(listOf("type" to type?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.command(type : CommandType? = null, classes : String? = null, content : String = "") : Unit = buildCOMMAND(listOf("type" to type?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun FlowContent.commandCommand(classes : String? = null, block : COMMAND.() -> Unit) : Unit = buildCOMMAND(listOf("type" to CommandType.command.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.checkBoxCommand(classes : String? = null, block : COMMAND.() -> Unit) : Unit = buildCOMMAND(listOf("type" to CommandType.checkBox.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.radioCommand(classes : String? = null, block : COMMAND.() -> Unit) : Unit = buildCOMMAND(listOf("type" to CommandType.radio.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.commandCommand(classes : String? = null, content : String = "") : Unit = buildCOMMAND(listOf("type" to CommandType.command.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun FlowContent.checkBoxCommand(classes : String? = null, content : String = "") : Unit = buildCOMMAND(listOf("type" to CommandType.checkBox.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun FlowContent.radioCommand(classes : String? = null, content : String = "") : Unit = buildCOMMAND(listOf("type" to CommandType.radio.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})

fun FlowContent.dataList(classes : String? = null, block : DATALIST.() -> Unit) : Unit = buildDATALIST(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.del(classes : String? = null, block : DEL.() -> Unit) : Unit = buildDEL(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.details(classes : String? = null, block : DETAILS.() -> Unit) : Unit = buildDETAILS(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.dfn(classes : String? = null, block : DFN.() -> Unit) : Unit = buildDFN(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.dialog(classes : String? = null, block : DIALOG.() -> Unit) : Unit = buildDIALOG(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.div(classes : String? = null, block : DIV.() -> Unit) : Unit = buildDIV(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.dl(classes : String? = null, block : DL.() -> Unit) : Unit = buildDL(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.em(classes : String? = null, block : EM.() -> Unit) : Unit = buildEM(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.embed(classes : String? = null, block : EMBED.() -> Unit) : Unit = buildEMBED(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.embed(classes : String? = null, content : String = "") : Unit = buildEMBED(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})

fun FlowContent.fieldSet(classes : String? = null, block : FIELDSET.() -> Unit) : Unit = buildFIELDSET(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.figure(classes : String? = null, block : FIGURE.() -> Unit) : Unit = buildFIGURE(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.footer(classes : String? = null, block : FOOTER.() -> Unit) : Unit = buildFOOTER(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.form(action : String? = null, encType : FormEncType? = null, method : FormMethod? = null, classes : String? = null, block : FORM.() -> Unit) : Unit = buildFORM(listOf("action" to action,"enctype" to encType?.enumEncode(),"method" to method?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.getForm(action : String? = null, encType : FormEncType? = null, classes : String? = null, block : FORM.() -> Unit) : Unit = buildFORM(listOf("action" to action,"enctype" to encType?.enumEncode(),"method" to FormMethod.get.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.postForm(action : String? = null, encType : FormEncType? = null, classes : String? = null, block : FORM.() -> Unit) : Unit = buildFORM(listOf("action" to action,"enctype" to encType?.enumEncode(),"method" to FormMethod.post.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.putForm(action : String? = null, encType : FormEncType? = null, classes : String? = null, block : FORM.() -> Unit) : Unit = buildFORM(listOf("action" to action,"enctype" to encType?.enumEncode(),"method" to FormMethod.put.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.deleteForm(action : String? = null, encType : FormEncType? = null, classes : String? = null, block : FORM.() -> Unit) : Unit = buildFORM(listOf("action" to action,"enctype" to encType?.enumEncode(),"method" to FormMethod.delete.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.h1(classes : String? = null, block : H1.() -> Unit) : Unit = buildH1(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.h2(classes : String? = null, block : H2.() -> Unit) : Unit = buildH2(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.h3(classes : String? = null, block : H3.() -> Unit) : Unit = buildH3(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.h4(classes : String? = null, block : H4.() -> Unit) : Unit = buildH4(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.h5(classes : String? = null, block : H5.() -> Unit) : Unit = buildH5(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.h6(classes : String? = null, block : H6.() -> Unit) : Unit = buildH6(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.header(classes : String? = null, block : HEADER.() -> Unit) : Unit = buildHEADER(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.hGroup(classes : String? = null, block : HGROUP.() -> Unit) : Unit = buildHGROUP(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.hr(classes : String? = null, block : HR.() -> Unit) : Unit = buildHR(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.hr(classes : String? = null, content : String = "") : Unit = buildHR(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})

fun FlowContent.i(classes : String? = null, block : I.() -> Unit) : Unit = buildI(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.iframe(sandbox : IframeSandbox? = null, classes : String? = null, block : IFRAME.() -> Unit) : Unit = buildIFRAME(listOf("sandbox" to sandbox?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.iframe(sandbox : IframeSandbox? = null, classes : String? = null, content : String = "") : Unit = buildIFRAME(listOf("sandbox" to sandbox?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun FlowContent.allowSameOriginIframe(classes : String? = null, block : IFRAME.() -> Unit) : Unit = buildIFRAME(listOf("sandbox" to IframeSandbox.allowSameOrigin.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.allowFormSIframe(classes : String? = null, block : IFRAME.() -> Unit) : Unit = buildIFRAME(listOf("sandbox" to IframeSandbox.allowFormS.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.allowScriptsIframe(classes : String? = null, block : IFRAME.() -> Unit) : Unit = buildIFRAME(listOf("sandbox" to IframeSandbox.allowScripts.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.allowSameOriginIframe(classes : String? = null, content : String = "") : Unit = buildIFRAME(listOf("sandbox" to IframeSandbox.allowSameOrigin.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun FlowContent.allowFormSIframe(classes : String? = null, content : String = "") : Unit = buildIFRAME(listOf("sandbox" to IframeSandbox.allowFormS.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun FlowContent.allowScriptsIframe(classes : String? = null, content : String = "") : Unit = buildIFRAME(listOf("sandbox" to IframeSandbox.allowScripts.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})

fun FlowContent.img(alt : String? = null, src : String? = null, classes : String? = null, block : IMG.() -> Unit) : Unit = buildIMG(listOf("alt" to alt,"src" to src,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.img(alt : String? = null, src : String? = null, classes : String? = null, content : String = "") : Unit = buildIMG(listOf("alt" to alt,"src" to src,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})

fun FlowContent.input(type : InputType? = null, formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to type?.enumEncode(),"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.input(type : InputType? = null, formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to type?.enumEncode(),"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun FlowContent.buttonInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.button.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.checkBoxInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.checkBox.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.colorInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.color.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.dateInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.date.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.dateTimeInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.dateTime.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.dateTimeLocalInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.dateTimeLocal.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.emailInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.email.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.fileInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.file.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.hiddenInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.hidden.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.imageInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.image.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.monthInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.month.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.numberInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.number.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.passwordInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.password.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.radioInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.radio.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.rangeInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.range.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.resetInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.reset.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.searchInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.search.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.submitInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.submit.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.textInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.text.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.telInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.tel.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.timeInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.time.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.urlInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.url.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.weekInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.week.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.buttonInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.button.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun FlowContent.checkBoxInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.checkBox.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun FlowContent.colorInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.color.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun FlowContent.dateInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.date.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun FlowContent.dateTimeInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.dateTime.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun FlowContent.dateTimeLocalInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.dateTimeLocal.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun FlowContent.emailInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.email.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun FlowContent.fileInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.file.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun FlowContent.hiddenInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.hidden.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun FlowContent.imageInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.image.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun FlowContent.monthInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.month.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun FlowContent.numberInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.number.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun FlowContent.passwordInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.password.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun FlowContent.radioInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.radio.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun FlowContent.rangeInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.range.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun FlowContent.resetInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.reset.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun FlowContent.searchInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.search.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun FlowContent.submitInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.submit.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun FlowContent.textInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.text.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun FlowContent.telInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.tel.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun FlowContent.timeInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.time.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun FlowContent.urlInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.url.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun FlowContent.weekInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.week.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})

fun FlowContent.ins(classes : String? = null, block : INS.() -> Unit) : Unit = buildINS(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.kbd(classes : String? = null, block : KBD.() -> Unit) : Unit = buildKBD(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.keyGen(keyType : KeyGenKeyType? = null, classes : String? = null, block : KEYGEN.() -> Unit) : Unit = buildKEYGEN(listOf("keytype" to keyType?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.keyGen(keyType : KeyGenKeyType? = null, classes : String? = null, content : String = "") : Unit = buildKEYGEN(listOf("keytype" to keyType?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun FlowContent.rsaKeyGen(classes : String? = null, block : KEYGEN.() -> Unit) : Unit = buildKEYGEN(listOf("keytype" to KeyGenKeyType.rsa.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.rsaKeyGen(classes : String? = null, content : String = "") : Unit = buildKEYGEN(listOf("keytype" to KeyGenKeyType.rsa.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})

fun FlowContent.label(classes : String? = null, block : LABEL.() -> Unit) : Unit = buildLABEL(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.link(classes : String? = null, block : LINK.() -> Unit) : Unit = buildLINK(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.link(classes : String? = null, content : String = "") : Unit = buildLINK(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})

fun FlowContent.map(name : String? = null, classes : String? = null, block : MAP.() -> Unit) : Unit = buildMAP(listOf("name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.mark(classes : String? = null, block : MARK.() -> Unit) : Unit = buildMARK(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.math(classes : String? = null, block : MATH.() -> Unit) : Unit = buildMATH(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.menu(type : MenuType? = null, classes : String? = null, block : MENU.() -> Unit) : Unit = buildMENU(listOf("type" to type?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.contextMenu(classes : String? = null, block : MENU.() -> Unit) : Unit = buildMENU(listOf("type" to MenuType.context.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.toolbarMenu(classes : String? = null, block : MENU.() -> Unit) : Unit = buildMENU(listOf("type" to MenuType.toolbar.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.listMenu(classes : String? = null, block : MENU.() -> Unit) : Unit = buildMENU(listOf("type" to MenuType.list.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.meta(classes : String? = null, block : META.() -> Unit) : Unit = buildMETA(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.meta(classes : String? = null, content : String = "") : Unit = buildMETA(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})

fun FlowContent.meter(classes : String? = null, block : METER.() -> Unit) : Unit = buildMETER(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.nav(classes : String? = null, block : NAV.() -> Unit) : Unit = buildNAV(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.noScript(classes : String? = null, block : NOSCRIPT.() -> Unit) : Unit = buildNOSCRIPT(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.ol(classes : String? = null, block : OL.() -> Unit) : Unit = buildOL(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.object_(classes : String? = null, block : OBJECT_.() -> Unit) : Unit = buildOBJECT_(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.output(classes : String? = null, block : OUTPUT.() -> Unit) : Unit = buildOUTPUT(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.p(classes : String? = null, block : P.() -> Unit) : Unit = buildP(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.pre(classes : String? = null, block : PRE.() -> Unit) : Unit = buildPRE(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.progress(classes : String? = null, block : PROGRESS.() -> Unit) : Unit = buildPROGRESS(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.q(classes : String? = null, block : Q.() -> Unit) : Unit = buildQ(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.ruby(classes : String? = null, block : RUBY.() -> Unit) : Unit = buildRUBY(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.samp(classes : String? = null, block : SAMP.() -> Unit) : Unit = buildSAMP(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.script(type : ScriptType? = null, src : String? = null, block : SCRIPT.() -> Unit) : Unit = buildSCRIPT(listOf("type" to type?.enumEncode(),"src" to src).toAttributesMap(), consumer, block)
fun FlowContent.script(type : ScriptType? = null, src : String? = null, content : String = "") : Unit = buildSCRIPT(listOf("type" to type?.enumEncode(),"src" to src).toAttributesMap(), consumer, {+content})
fun FlowContent.textEcmaScriptScript(src : String? = null, block : SCRIPT.() -> Unit) : Unit = buildSCRIPT(listOf("type" to ScriptType.textEcmaScript.realValue,"src" to src).toAttributesMap(), consumer, block)
fun FlowContent.textJavaScriptScript(src : String? = null, block : SCRIPT.() -> Unit) : Unit = buildSCRIPT(listOf("type" to ScriptType.textJavaScript.realValue,"src" to src).toAttributesMap(), consumer, block)
fun FlowContent.textJavaScript10Script(src : String? = null, block : SCRIPT.() -> Unit) : Unit = buildSCRIPT(listOf("type" to ScriptType.textJavaScript10.realValue,"src" to src).toAttributesMap(), consumer, block)
fun FlowContent.textJavaScript11Script(src : String? = null, block : SCRIPT.() -> Unit) : Unit = buildSCRIPT(listOf("type" to ScriptType.textJavaScript11.realValue,"src" to src).toAttributesMap(), consumer, block)
fun FlowContent.textJavaScript12Script(src : String? = null, block : SCRIPT.() -> Unit) : Unit = buildSCRIPT(listOf("type" to ScriptType.textJavaScript12.realValue,"src" to src).toAttributesMap(), consumer, block)
fun FlowContent.textJavaScript13Script(src : String? = null, block : SCRIPT.() -> Unit) : Unit = buildSCRIPT(listOf("type" to ScriptType.textJavaScript13.realValue,"src" to src).toAttributesMap(), consumer, block)
fun FlowContent.textJavaScript14Script(src : String? = null, block : SCRIPT.() -> Unit) : Unit = buildSCRIPT(listOf("type" to ScriptType.textJavaScript14.realValue,"src" to src).toAttributesMap(), consumer, block)
fun FlowContent.textJavaScript15Script(src : String? = null, block : SCRIPT.() -> Unit) : Unit = buildSCRIPT(listOf("type" to ScriptType.textJavaScript15.realValue,"src" to src).toAttributesMap(), consumer, block)
fun FlowContent.textJScriptScript(src : String? = null, block : SCRIPT.() -> Unit) : Unit = buildSCRIPT(listOf("type" to ScriptType.textJScript.realValue,"src" to src).toAttributesMap(), consumer, block)
fun FlowContent.textXJavaScriptScript(src : String? = null, block : SCRIPT.() -> Unit) : Unit = buildSCRIPT(listOf("type" to ScriptType.textXJavaScript.realValue,"src" to src).toAttributesMap(), consumer, block)
fun FlowContent.textXEcmaScriptScript(src : String? = null, block : SCRIPT.() -> Unit) : Unit = buildSCRIPT(listOf("type" to ScriptType.textXEcmaScript.realValue,"src" to src).toAttributesMap(), consumer, block)
fun FlowContent.textVbScriptScript(src : String? = null, block : SCRIPT.() -> Unit) : Unit = buildSCRIPT(listOf("type" to ScriptType.textVbScript.realValue,"src" to src).toAttributesMap(), consumer, block)
fun FlowContent.textEcmaScriptScript(src : String? = null, content : String = "") : Unit = buildSCRIPT(listOf("type" to ScriptType.textEcmaScript.realValue,"src" to src).toAttributesMap(), consumer, {+content})
fun FlowContent.textJavaScriptScript(src : String? = null, content : String = "") : Unit = buildSCRIPT(listOf("type" to ScriptType.textJavaScript.realValue,"src" to src).toAttributesMap(), consumer, {+content})
fun FlowContent.textJavaScript10Script(src : String? = null, content : String = "") : Unit = buildSCRIPT(listOf("type" to ScriptType.textJavaScript10.realValue,"src" to src).toAttributesMap(), consumer, {+content})
fun FlowContent.textJavaScript11Script(src : String? = null, content : String = "") : Unit = buildSCRIPT(listOf("type" to ScriptType.textJavaScript11.realValue,"src" to src).toAttributesMap(), consumer, {+content})
fun FlowContent.textJavaScript12Script(src : String? = null, content : String = "") : Unit = buildSCRIPT(listOf("type" to ScriptType.textJavaScript12.realValue,"src" to src).toAttributesMap(), consumer, {+content})
fun FlowContent.textJavaScript13Script(src : String? = null, content : String = "") : Unit = buildSCRIPT(listOf("type" to ScriptType.textJavaScript13.realValue,"src" to src).toAttributesMap(), consumer, {+content})
fun FlowContent.textJavaScript14Script(src : String? = null, content : String = "") : Unit = buildSCRIPT(listOf("type" to ScriptType.textJavaScript14.realValue,"src" to src).toAttributesMap(), consumer, {+content})
fun FlowContent.textJavaScript15Script(src : String? = null, content : String = "") : Unit = buildSCRIPT(listOf("type" to ScriptType.textJavaScript15.realValue,"src" to src).toAttributesMap(), consumer, {+content})
fun FlowContent.textJScriptScript(src : String? = null, content : String = "") : Unit = buildSCRIPT(listOf("type" to ScriptType.textJScript.realValue,"src" to src).toAttributesMap(), consumer, {+content})
fun FlowContent.textXJavaScriptScript(src : String? = null, content : String = "") : Unit = buildSCRIPT(listOf("type" to ScriptType.textXJavaScript.realValue,"src" to src).toAttributesMap(), consumer, {+content})
fun FlowContent.textXEcmaScriptScript(src : String? = null, content : String = "") : Unit = buildSCRIPT(listOf("type" to ScriptType.textXEcmaScript.realValue,"src" to src).toAttributesMap(), consumer, {+content})
fun FlowContent.textVbScriptScript(src : String? = null, content : String = "") : Unit = buildSCRIPT(listOf("type" to ScriptType.textVbScript.realValue,"src" to src).toAttributesMap(), consumer, {+content})

fun FlowContent.section(classes : String? = null, block : SECTION.() -> Unit) : Unit = buildSECTION(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.select(classes : String? = null, block : SELECT.() -> Unit) : Unit = buildSELECT(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.small(classes : String? = null, block : SMALL.() -> Unit) : Unit = buildSMALL(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.span(classes : String? = null, block : SPAN.() -> Unit) : Unit = buildSPAN(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.strong(classes : String? = null, block : STRONG.() -> Unit) : Unit = buildSTRONG(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.style(classes : String? = null, block : STYLE.() -> Unit) : Unit = buildSTYLE(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.style(classes : String? = null, content : String = "") : Unit = buildSTYLE(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})

fun FlowContent.sub(classes : String? = null, block : SUB.() -> Unit) : Unit = buildSUB(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.sup(classes : String? = null, block : SUP.() -> Unit) : Unit = buildSUP(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.svg(classes : String? = null, block : SVG.() -> Unit) : Unit = buildSVG(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.svg(classes : String? = null, content : String = "") : Unit = buildSVG(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})

fun FlowContent.table(classes : String? = null, block : TABLE.() -> Unit) : Unit = buildTABLE(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.textArea(rows : String? = null, cols : String? = null, wrap : TextAreaWrap? = null, classes : String? = null, block : TEXTAREA.() -> Unit) : Unit = buildTEXTAREA(listOf("rows" to rows,"cols" to cols,"wrap" to wrap?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.textArea(rows : String? = null, cols : String? = null, wrap : TextAreaWrap? = null, classes : String? = null, content : String = "") : Unit = buildTEXTAREA(listOf("rows" to rows,"cols" to cols,"wrap" to wrap?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun FlowContent.hardTextArea(rows : String? = null, cols : String? = null, classes : String? = null, block : TEXTAREA.() -> Unit) : Unit = buildTEXTAREA(listOf("rows" to rows,"cols" to cols,"wrap" to TextAreaWrap.hard.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.softTextArea(rows : String? = null, cols : String? = null, classes : String? = null, block : TEXTAREA.() -> Unit) : Unit = buildTEXTAREA(listOf("rows" to rows,"cols" to cols,"wrap" to TextAreaWrap.soft.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun FlowContent.hardTextArea(rows : String? = null, cols : String? = null, classes : String? = null, content : String = "") : Unit = buildTEXTAREA(listOf("rows" to rows,"cols" to cols,"wrap" to TextAreaWrap.hard.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun FlowContent.softTextArea(rows : String? = null, cols : String? = null, classes : String? = null, content : String = "") : Unit = buildTEXTAREA(listOf("rows" to rows,"cols" to cols,"wrap" to TextAreaWrap.soft.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})

fun FlowContent.time(classes : String? = null, block : TIME.() -> Unit) : Unit = buildTIME(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.ul(classes : String? = null, block : UL.() -> Unit) : Unit = buildUL(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.var_(classes : String? = null, block : VAR_.() -> Unit) : Unit = buildVAR_(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun FlowContent.video(classes : String? = null, block : VIDEO.() -> Unit) : Unit = buildVIDEO(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun HeadingContent.h1(classes : String? = null, block : H1.() -> Unit) : Unit = buildH1(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun HeadingContent.h2(classes : String? = null, block : H2.() -> Unit) : Unit = buildH2(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun HeadingContent.h3(classes : String? = null, block : H3.() -> Unit) : Unit = buildH3(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun HeadingContent.h4(classes : String? = null, block : H4.() -> Unit) : Unit = buildH4(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun HeadingContent.h5(classes : String? = null, block : H5.() -> Unit) : Unit = buildH5(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun HeadingContent.h6(classes : String? = null, block : H6.() -> Unit) : Unit = buildH6(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun HeadingContent.hGroup(classes : String? = null, block : HGROUP.() -> Unit) : Unit = buildHGROUP(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun InteractiveContent.a(href : String? = null, target : String? = null, classes : String? = null, block : A.() -> Unit) : Unit = buildA(listOf("href" to href,"target" to target,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun InteractiveContent.audio(classes : String? = null, block : AUDIO.() -> Unit) : Unit = buildAUDIO(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun InteractiveContent.button(formEncType : ButtonFormEncType? = null, formMethod : ButtonFormMethod? = null, type : ButtonType? = null, classes : String? = null, block : BUTTON.() -> Unit) : Unit = buildBUTTON(listOf("formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"type" to type?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun InteractiveContent.getButton(formEncType : ButtonFormEncType? = null, type : ButtonType? = null, classes : String? = null, block : BUTTON.() -> Unit) : Unit = buildBUTTON(listOf("formenctype" to formEncType?.enumEncode(),"formmethod" to ButtonFormMethod.get.realValue,"type" to type?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun InteractiveContent.postButton(formEncType : ButtonFormEncType? = null, type : ButtonType? = null, classes : String? = null, block : BUTTON.() -> Unit) : Unit = buildBUTTON(listOf("formenctype" to formEncType?.enumEncode(),"formmethod" to ButtonFormMethod.post.realValue,"type" to type?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun InteractiveContent.putButton(formEncType : ButtonFormEncType? = null, type : ButtonType? = null, classes : String? = null, block : BUTTON.() -> Unit) : Unit = buildBUTTON(listOf("formenctype" to formEncType?.enumEncode(),"formmethod" to ButtonFormMethod.put.realValue,"type" to type?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun InteractiveContent.deleteButton(formEncType : ButtonFormEncType? = null, type : ButtonType? = null, classes : String? = null, block : BUTTON.() -> Unit) : Unit = buildBUTTON(listOf("formenctype" to formEncType?.enumEncode(),"formmethod" to ButtonFormMethod.delete.realValue,"type" to type?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun InteractiveContent.details(classes : String? = null, block : DETAILS.() -> Unit) : Unit = buildDETAILS(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun InteractiveContent.embed(classes : String? = null, block : EMBED.() -> Unit) : Unit = buildEMBED(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun InteractiveContent.embed(classes : String? = null, content : String = "") : Unit = buildEMBED(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})

fun InteractiveContent.iframe(sandbox : IframeSandbox? = null, classes : String? = null, block : IFRAME.() -> Unit) : Unit = buildIFRAME(listOf("sandbox" to sandbox?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun InteractiveContent.iframe(sandbox : IframeSandbox? = null, classes : String? = null, content : String = "") : Unit = buildIFRAME(listOf("sandbox" to sandbox?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun InteractiveContent.allowSameOriginIframe(classes : String? = null, block : IFRAME.() -> Unit) : Unit = buildIFRAME(listOf("sandbox" to IframeSandbox.allowSameOrigin.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun InteractiveContent.allowFormSIframe(classes : String? = null, block : IFRAME.() -> Unit) : Unit = buildIFRAME(listOf("sandbox" to IframeSandbox.allowFormS.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun InteractiveContent.allowScriptsIframe(classes : String? = null, block : IFRAME.() -> Unit) : Unit = buildIFRAME(listOf("sandbox" to IframeSandbox.allowScripts.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun InteractiveContent.allowSameOriginIframe(classes : String? = null, content : String = "") : Unit = buildIFRAME(listOf("sandbox" to IframeSandbox.allowSameOrigin.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun InteractiveContent.allowFormSIframe(classes : String? = null, content : String = "") : Unit = buildIFRAME(listOf("sandbox" to IframeSandbox.allowFormS.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun InteractiveContent.allowScriptsIframe(classes : String? = null, content : String = "") : Unit = buildIFRAME(listOf("sandbox" to IframeSandbox.allowScripts.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})

fun InteractiveContent.img(alt : String? = null, src : String? = null, classes : String? = null, block : IMG.() -> Unit) : Unit = buildIMG(listOf("alt" to alt,"src" to src,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun InteractiveContent.img(alt : String? = null, src : String? = null, classes : String? = null, content : String = "") : Unit = buildIMG(listOf("alt" to alt,"src" to src,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})

fun InteractiveContent.input(type : InputType? = null, formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to type?.enumEncode(),"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun InteractiveContent.input(type : InputType? = null, formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to type?.enumEncode(),"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun InteractiveContent.buttonInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.button.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun InteractiveContent.checkBoxInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.checkBox.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun InteractiveContent.colorInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.color.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun InteractiveContent.dateInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.date.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun InteractiveContent.dateTimeInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.dateTime.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun InteractiveContent.dateTimeLocalInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.dateTimeLocal.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun InteractiveContent.emailInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.email.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun InteractiveContent.fileInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.file.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun InteractiveContent.hiddenInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.hidden.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun InteractiveContent.imageInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.image.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun InteractiveContent.monthInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.month.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun InteractiveContent.numberInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.number.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun InteractiveContent.passwordInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.password.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun InteractiveContent.radioInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.radio.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun InteractiveContent.rangeInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.range.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun InteractiveContent.resetInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.reset.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun InteractiveContent.searchInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.search.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun InteractiveContent.submitInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.submit.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun InteractiveContent.textInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.text.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun InteractiveContent.telInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.tel.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun InteractiveContent.timeInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.time.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun InteractiveContent.urlInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.url.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun InteractiveContent.weekInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.week.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun InteractiveContent.buttonInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.button.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun InteractiveContent.checkBoxInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.checkBox.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun InteractiveContent.colorInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.color.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun InteractiveContent.dateInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.date.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun InteractiveContent.dateTimeInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.dateTime.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun InteractiveContent.dateTimeLocalInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.dateTimeLocal.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun InteractiveContent.emailInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.email.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun InteractiveContent.fileInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.file.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun InteractiveContent.hiddenInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.hidden.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun InteractiveContent.imageInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.image.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun InteractiveContent.monthInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.month.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun InteractiveContent.numberInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.number.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun InteractiveContent.passwordInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.password.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun InteractiveContent.radioInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.radio.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun InteractiveContent.rangeInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.range.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun InteractiveContent.resetInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.reset.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun InteractiveContent.searchInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.search.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun InteractiveContent.submitInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.submit.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun InteractiveContent.textInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.text.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun InteractiveContent.telInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.tel.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun InteractiveContent.timeInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.time.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun InteractiveContent.urlInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.url.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun InteractiveContent.weekInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.week.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})

fun InteractiveContent.keyGen(keyType : KeyGenKeyType? = null, classes : String? = null, block : KEYGEN.() -> Unit) : Unit = buildKEYGEN(listOf("keytype" to keyType?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun InteractiveContent.keyGen(keyType : KeyGenKeyType? = null, classes : String? = null, content : String = "") : Unit = buildKEYGEN(listOf("keytype" to keyType?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun InteractiveContent.rsaKeyGen(classes : String? = null, block : KEYGEN.() -> Unit) : Unit = buildKEYGEN(listOf("keytype" to KeyGenKeyType.rsa.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun InteractiveContent.rsaKeyGen(classes : String? = null, content : String = "") : Unit = buildKEYGEN(listOf("keytype" to KeyGenKeyType.rsa.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})

fun InteractiveContent.label(classes : String? = null, block : LABEL.() -> Unit) : Unit = buildLABEL(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun InteractiveContent.menu(type : MenuType? = null, classes : String? = null, block : MENU.() -> Unit) : Unit = buildMENU(listOf("type" to type?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun InteractiveContent.contextMenu(classes : String? = null, block : MENU.() -> Unit) : Unit = buildMENU(listOf("type" to MenuType.context.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun InteractiveContent.toolbarMenu(classes : String? = null, block : MENU.() -> Unit) : Unit = buildMENU(listOf("type" to MenuType.toolbar.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun InteractiveContent.listMenu(classes : String? = null, block : MENU.() -> Unit) : Unit = buildMENU(listOf("type" to MenuType.list.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun InteractiveContent.object_(classes : String? = null, block : OBJECT_.() -> Unit) : Unit = buildOBJECT_(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun InteractiveContent.select(classes : String? = null, block : SELECT.() -> Unit) : Unit = buildSELECT(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun InteractiveContent.textArea(rows : String? = null, cols : String? = null, wrap : TextAreaWrap? = null, classes : String? = null, block : TEXTAREA.() -> Unit) : Unit = buildTEXTAREA(listOf("rows" to rows,"cols" to cols,"wrap" to wrap?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun InteractiveContent.textArea(rows : String? = null, cols : String? = null, wrap : TextAreaWrap? = null, classes : String? = null, content : String = "") : Unit = buildTEXTAREA(listOf("rows" to rows,"cols" to cols,"wrap" to wrap?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun InteractiveContent.hardTextArea(rows : String? = null, cols : String? = null, classes : String? = null, block : TEXTAREA.() -> Unit) : Unit = buildTEXTAREA(listOf("rows" to rows,"cols" to cols,"wrap" to TextAreaWrap.hard.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun InteractiveContent.softTextArea(rows : String? = null, cols : String? = null, classes : String? = null, block : TEXTAREA.() -> Unit) : Unit = buildTEXTAREA(listOf("rows" to rows,"cols" to cols,"wrap" to TextAreaWrap.soft.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun InteractiveContent.hardTextArea(rows : String? = null, cols : String? = null, classes : String? = null, content : String = "") : Unit = buildTEXTAREA(listOf("rows" to rows,"cols" to cols,"wrap" to TextAreaWrap.hard.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun InteractiveContent.softTextArea(rows : String? = null, cols : String? = null, classes : String? = null, content : String = "") : Unit = buildTEXTAREA(listOf("rows" to rows,"cols" to cols,"wrap" to TextAreaWrap.soft.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})

fun InteractiveContent.video(classes : String? = null, block : VIDEO.() -> Unit) : Unit = buildVIDEO(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun MetaDataContent.base(classes : String? = null, block : BASE.() -> Unit) : Unit = buildBASE(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun MetaDataContent.base(classes : String? = null, content : String = "") : Unit = buildBASE(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})

fun MetaDataContent.command(type : CommandType? = null, classes : String? = null, block : COMMAND.() -> Unit) : Unit = buildCOMMAND(listOf("type" to type?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun MetaDataContent.command(type : CommandType? = null, classes : String? = null, content : String = "") : Unit = buildCOMMAND(listOf("type" to type?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun MetaDataContent.commandCommand(classes : String? = null, block : COMMAND.() -> Unit) : Unit = buildCOMMAND(listOf("type" to CommandType.command.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun MetaDataContent.checkBoxCommand(classes : String? = null, block : COMMAND.() -> Unit) : Unit = buildCOMMAND(listOf("type" to CommandType.checkBox.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun MetaDataContent.radioCommand(classes : String? = null, block : COMMAND.() -> Unit) : Unit = buildCOMMAND(listOf("type" to CommandType.radio.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun MetaDataContent.commandCommand(classes : String? = null, content : String = "") : Unit = buildCOMMAND(listOf("type" to CommandType.command.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun MetaDataContent.checkBoxCommand(classes : String? = null, content : String = "") : Unit = buildCOMMAND(listOf("type" to CommandType.checkBox.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun MetaDataContent.radioCommand(classes : String? = null, content : String = "") : Unit = buildCOMMAND(listOf("type" to CommandType.radio.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})

fun MetaDataContent.link(classes : String? = null, block : LINK.() -> Unit) : Unit = buildLINK(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun MetaDataContent.link(classes : String? = null, content : String = "") : Unit = buildLINK(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})

fun MetaDataContent.meta(classes : String? = null, block : META.() -> Unit) : Unit = buildMETA(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun MetaDataContent.meta(classes : String? = null, content : String = "") : Unit = buildMETA(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})

fun MetaDataContent.noScript(classes : String? = null, block : NOSCRIPT.() -> Unit) : Unit = buildNOSCRIPT(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun MetaDataContent.script(type : ScriptType? = null, src : String? = null, block : SCRIPT.() -> Unit) : Unit = buildSCRIPT(listOf("type" to type?.enumEncode(),"src" to src).toAttributesMap(), consumer, block)
fun MetaDataContent.script(type : ScriptType? = null, src : String? = null, content : String = "") : Unit = buildSCRIPT(listOf("type" to type?.enumEncode(),"src" to src).toAttributesMap(), consumer, {+content})
fun MetaDataContent.textEcmaScriptScript(src : String? = null, block : SCRIPT.() -> Unit) : Unit = buildSCRIPT(listOf("type" to ScriptType.textEcmaScript.realValue,"src" to src).toAttributesMap(), consumer, block)
fun MetaDataContent.textJavaScriptScript(src : String? = null, block : SCRIPT.() -> Unit) : Unit = buildSCRIPT(listOf("type" to ScriptType.textJavaScript.realValue,"src" to src).toAttributesMap(), consumer, block)
fun MetaDataContent.textJavaScript10Script(src : String? = null, block : SCRIPT.() -> Unit) : Unit = buildSCRIPT(listOf("type" to ScriptType.textJavaScript10.realValue,"src" to src).toAttributesMap(), consumer, block)
fun MetaDataContent.textJavaScript11Script(src : String? = null, block : SCRIPT.() -> Unit) : Unit = buildSCRIPT(listOf("type" to ScriptType.textJavaScript11.realValue,"src" to src).toAttributesMap(), consumer, block)
fun MetaDataContent.textJavaScript12Script(src : String? = null, block : SCRIPT.() -> Unit) : Unit = buildSCRIPT(listOf("type" to ScriptType.textJavaScript12.realValue,"src" to src).toAttributesMap(), consumer, block)
fun MetaDataContent.textJavaScript13Script(src : String? = null, block : SCRIPT.() -> Unit) : Unit = buildSCRIPT(listOf("type" to ScriptType.textJavaScript13.realValue,"src" to src).toAttributesMap(), consumer, block)
fun MetaDataContent.textJavaScript14Script(src : String? = null, block : SCRIPT.() -> Unit) : Unit = buildSCRIPT(listOf("type" to ScriptType.textJavaScript14.realValue,"src" to src).toAttributesMap(), consumer, block)
fun MetaDataContent.textJavaScript15Script(src : String? = null, block : SCRIPT.() -> Unit) : Unit = buildSCRIPT(listOf("type" to ScriptType.textJavaScript15.realValue,"src" to src).toAttributesMap(), consumer, block)
fun MetaDataContent.textJScriptScript(src : String? = null, block : SCRIPT.() -> Unit) : Unit = buildSCRIPT(listOf("type" to ScriptType.textJScript.realValue,"src" to src).toAttributesMap(), consumer, block)
fun MetaDataContent.textXJavaScriptScript(src : String? = null, block : SCRIPT.() -> Unit) : Unit = buildSCRIPT(listOf("type" to ScriptType.textXJavaScript.realValue,"src" to src).toAttributesMap(), consumer, block)
fun MetaDataContent.textXEcmaScriptScript(src : String? = null, block : SCRIPT.() -> Unit) : Unit = buildSCRIPT(listOf("type" to ScriptType.textXEcmaScript.realValue,"src" to src).toAttributesMap(), consumer, block)
fun MetaDataContent.textVbScriptScript(src : String? = null, block : SCRIPT.() -> Unit) : Unit = buildSCRIPT(listOf("type" to ScriptType.textVbScript.realValue,"src" to src).toAttributesMap(), consumer, block)
fun MetaDataContent.textEcmaScriptScript(src : String? = null, content : String = "") : Unit = buildSCRIPT(listOf("type" to ScriptType.textEcmaScript.realValue,"src" to src).toAttributesMap(), consumer, {+content})
fun MetaDataContent.textJavaScriptScript(src : String? = null, content : String = "") : Unit = buildSCRIPT(listOf("type" to ScriptType.textJavaScript.realValue,"src" to src).toAttributesMap(), consumer, {+content})
fun MetaDataContent.textJavaScript10Script(src : String? = null, content : String = "") : Unit = buildSCRIPT(listOf("type" to ScriptType.textJavaScript10.realValue,"src" to src).toAttributesMap(), consumer, {+content})
fun MetaDataContent.textJavaScript11Script(src : String? = null, content : String = "") : Unit = buildSCRIPT(listOf("type" to ScriptType.textJavaScript11.realValue,"src" to src).toAttributesMap(), consumer, {+content})
fun MetaDataContent.textJavaScript12Script(src : String? = null, content : String = "") : Unit = buildSCRIPT(listOf("type" to ScriptType.textJavaScript12.realValue,"src" to src).toAttributesMap(), consumer, {+content})
fun MetaDataContent.textJavaScript13Script(src : String? = null, content : String = "") : Unit = buildSCRIPT(listOf("type" to ScriptType.textJavaScript13.realValue,"src" to src).toAttributesMap(), consumer, {+content})
fun MetaDataContent.textJavaScript14Script(src : String? = null, content : String = "") : Unit = buildSCRIPT(listOf("type" to ScriptType.textJavaScript14.realValue,"src" to src).toAttributesMap(), consumer, {+content})
fun MetaDataContent.textJavaScript15Script(src : String? = null, content : String = "") : Unit = buildSCRIPT(listOf("type" to ScriptType.textJavaScript15.realValue,"src" to src).toAttributesMap(), consumer, {+content})
fun MetaDataContent.textJScriptScript(src : String? = null, content : String = "") : Unit = buildSCRIPT(listOf("type" to ScriptType.textJScript.realValue,"src" to src).toAttributesMap(), consumer, {+content})
fun MetaDataContent.textXJavaScriptScript(src : String? = null, content : String = "") : Unit = buildSCRIPT(listOf("type" to ScriptType.textXJavaScript.realValue,"src" to src).toAttributesMap(), consumer, {+content})
fun MetaDataContent.textXEcmaScriptScript(src : String? = null, content : String = "") : Unit = buildSCRIPT(listOf("type" to ScriptType.textXEcmaScript.realValue,"src" to src).toAttributesMap(), consumer, {+content})
fun MetaDataContent.textVbScriptScript(src : String? = null, content : String = "") : Unit = buildSCRIPT(listOf("type" to ScriptType.textVbScript.realValue,"src" to src).toAttributesMap(), consumer, {+content})

fun MetaDataContent.style(classes : String? = null, block : STYLE.() -> Unit) : Unit = buildSTYLE(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun MetaDataContent.style(classes : String? = null, content : String = "") : Unit = buildSTYLE(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})

fun MetaDataContent.title(classes : String? = null, block : TITLE.() -> Unit) : Unit = buildTITLE(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun MetaDataContent.title(classes : String? = null, content : String = "") : Unit = buildTITLE(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})

fun PhrasingContent.a(href : String? = null, target : String? = null, classes : String? = null, block : A.() -> Unit) : Unit = buildA(listOf("href" to href,"target" to target,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun PhrasingContent.abbr(classes : String? = null, block : ABBR.() -> Unit) : Unit = buildABBR(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun PhrasingContent.area(shape : AreaShape? = null, alt : String? = null, classes : String? = null, block : AREA.() -> Unit) : Unit = buildAREA(listOf("Shape" to shape?.enumEncode(),"alt" to alt,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun PhrasingContent.area(shape : AreaShape? = null, alt : String? = null, classes : String? = null, content : String = "") : Unit = buildAREA(listOf("Shape" to shape?.enumEncode(),"alt" to alt,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun PhrasingContent.rectArea(alt : String? = null, classes : String? = null, block : AREA.() -> Unit) : Unit = buildAREA(listOf("Shape" to AreaShape.rect.realValue,"alt" to alt,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun PhrasingContent.circleArea(alt : String? = null, classes : String? = null, block : AREA.() -> Unit) : Unit = buildAREA(listOf("Shape" to AreaShape.circle.realValue,"alt" to alt,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun PhrasingContent.polyArea(alt : String? = null, classes : String? = null, block : AREA.() -> Unit) : Unit = buildAREA(listOf("Shape" to AreaShape.poly.realValue,"alt" to alt,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun PhrasingContent.defaultArea(alt : String? = null, classes : String? = null, block : AREA.() -> Unit) : Unit = buildAREA(listOf("Shape" to AreaShape.default.realValue,"alt" to alt,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun PhrasingContent.rectArea(alt : String? = null, classes : String? = null, content : String = "") : Unit = buildAREA(listOf("Shape" to AreaShape.rect.realValue,"alt" to alt,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun PhrasingContent.circleArea(alt : String? = null, classes : String? = null, content : String = "") : Unit = buildAREA(listOf("Shape" to AreaShape.circle.realValue,"alt" to alt,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun PhrasingContent.polyArea(alt : String? = null, classes : String? = null, content : String = "") : Unit = buildAREA(listOf("Shape" to AreaShape.poly.realValue,"alt" to alt,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun PhrasingContent.defaultArea(alt : String? = null, classes : String? = null, content : String = "") : Unit = buildAREA(listOf("Shape" to AreaShape.default.realValue,"alt" to alt,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})

fun PhrasingContent.audio(classes : String? = null, block : AUDIO.() -> Unit) : Unit = buildAUDIO(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun PhrasingContent.b(classes : String? = null, block : B.() -> Unit) : Unit = buildB(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun PhrasingContent.bdi(classes : String? = null, block : BDI.() -> Unit) : Unit = buildBDI(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun PhrasingContent.bdo(classes : String? = null, block : BDO.() -> Unit) : Unit = buildBDO(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun PhrasingContent.br(classes : String? = null, block : BR.() -> Unit) : Unit = buildBR(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun PhrasingContent.br(classes : String? = null, content : String = "") : Unit = buildBR(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})

fun PhrasingContent.button(formEncType : ButtonFormEncType? = null, formMethod : ButtonFormMethod? = null, type : ButtonType? = null, classes : String? = null, block : BUTTON.() -> Unit) : Unit = buildBUTTON(listOf("formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"type" to type?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun PhrasingContent.getButton(formEncType : ButtonFormEncType? = null, type : ButtonType? = null, classes : String? = null, block : BUTTON.() -> Unit) : Unit = buildBUTTON(listOf("formenctype" to formEncType?.enumEncode(),"formmethod" to ButtonFormMethod.get.realValue,"type" to type?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun PhrasingContent.postButton(formEncType : ButtonFormEncType? = null, type : ButtonType? = null, classes : String? = null, block : BUTTON.() -> Unit) : Unit = buildBUTTON(listOf("formenctype" to formEncType?.enumEncode(),"formmethod" to ButtonFormMethod.post.realValue,"type" to type?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun PhrasingContent.putButton(formEncType : ButtonFormEncType? = null, type : ButtonType? = null, classes : String? = null, block : BUTTON.() -> Unit) : Unit = buildBUTTON(listOf("formenctype" to formEncType?.enumEncode(),"formmethod" to ButtonFormMethod.put.realValue,"type" to type?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun PhrasingContent.deleteButton(formEncType : ButtonFormEncType? = null, type : ButtonType? = null, classes : String? = null, block : BUTTON.() -> Unit) : Unit = buildBUTTON(listOf("formenctype" to formEncType?.enumEncode(),"formmethod" to ButtonFormMethod.delete.realValue,"type" to type?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun PhrasingContent.canvas(classes : String? = null, block : CANVAS.() -> Unit) : Unit = buildCANVAS(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun PhrasingContent.canvas(classes : String? = null, content : String = "") : Unit = buildCANVAS(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})

fun PhrasingContent.cite(classes : String? = null, block : CITE.() -> Unit) : Unit = buildCITE(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun PhrasingContent.code(classes : String? = null, block : CODE.() -> Unit) : Unit = buildCODE(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun PhrasingContent.command(type : CommandType? = null, classes : String? = null, block : COMMAND.() -> Unit) : Unit = buildCOMMAND(listOf("type" to type?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun PhrasingContent.command(type : CommandType? = null, classes : String? = null, content : String = "") : Unit = buildCOMMAND(listOf("type" to type?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun PhrasingContent.commandCommand(classes : String? = null, block : COMMAND.() -> Unit) : Unit = buildCOMMAND(listOf("type" to CommandType.command.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun PhrasingContent.checkBoxCommand(classes : String? = null, block : COMMAND.() -> Unit) : Unit = buildCOMMAND(listOf("type" to CommandType.checkBox.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun PhrasingContent.radioCommand(classes : String? = null, block : COMMAND.() -> Unit) : Unit = buildCOMMAND(listOf("type" to CommandType.radio.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun PhrasingContent.commandCommand(classes : String? = null, content : String = "") : Unit = buildCOMMAND(listOf("type" to CommandType.command.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun PhrasingContent.checkBoxCommand(classes : String? = null, content : String = "") : Unit = buildCOMMAND(listOf("type" to CommandType.checkBox.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun PhrasingContent.radioCommand(classes : String? = null, content : String = "") : Unit = buildCOMMAND(listOf("type" to CommandType.radio.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})

fun PhrasingContent.dataList(classes : String? = null, block : DATALIST.() -> Unit) : Unit = buildDATALIST(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun PhrasingContent.del(classes : String? = null, block : DEL.() -> Unit) : Unit = buildDEL(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun PhrasingContent.dfn(classes : String? = null, block : DFN.() -> Unit) : Unit = buildDFN(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun PhrasingContent.em(classes : String? = null, block : EM.() -> Unit) : Unit = buildEM(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun PhrasingContent.embed(classes : String? = null, block : EMBED.() -> Unit) : Unit = buildEMBED(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun PhrasingContent.embed(classes : String? = null, content : String = "") : Unit = buildEMBED(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})

fun PhrasingContent.i(classes : String? = null, block : I.() -> Unit) : Unit = buildI(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun PhrasingContent.iframe(sandbox : IframeSandbox? = null, classes : String? = null, block : IFRAME.() -> Unit) : Unit = buildIFRAME(listOf("sandbox" to sandbox?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun PhrasingContent.iframe(sandbox : IframeSandbox? = null, classes : String? = null, content : String = "") : Unit = buildIFRAME(listOf("sandbox" to sandbox?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun PhrasingContent.allowSameOriginIframe(classes : String? = null, block : IFRAME.() -> Unit) : Unit = buildIFRAME(listOf("sandbox" to IframeSandbox.allowSameOrigin.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun PhrasingContent.allowFormSIframe(classes : String? = null, block : IFRAME.() -> Unit) : Unit = buildIFRAME(listOf("sandbox" to IframeSandbox.allowFormS.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun PhrasingContent.allowScriptsIframe(classes : String? = null, block : IFRAME.() -> Unit) : Unit = buildIFRAME(listOf("sandbox" to IframeSandbox.allowScripts.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun PhrasingContent.allowSameOriginIframe(classes : String? = null, content : String = "") : Unit = buildIFRAME(listOf("sandbox" to IframeSandbox.allowSameOrigin.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun PhrasingContent.allowFormSIframe(classes : String? = null, content : String = "") : Unit = buildIFRAME(listOf("sandbox" to IframeSandbox.allowFormS.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun PhrasingContent.allowScriptsIframe(classes : String? = null, content : String = "") : Unit = buildIFRAME(listOf("sandbox" to IframeSandbox.allowScripts.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})

fun PhrasingContent.img(alt : String? = null, src : String? = null, classes : String? = null, block : IMG.() -> Unit) : Unit = buildIMG(listOf("alt" to alt,"src" to src,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun PhrasingContent.img(alt : String? = null, src : String? = null, classes : String? = null, content : String = "") : Unit = buildIMG(listOf("alt" to alt,"src" to src,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})

fun PhrasingContent.input(type : InputType? = null, formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to type?.enumEncode(),"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun PhrasingContent.input(type : InputType? = null, formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to type?.enumEncode(),"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun PhrasingContent.buttonInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.button.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun PhrasingContent.checkBoxInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.checkBox.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun PhrasingContent.colorInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.color.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun PhrasingContent.dateInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.date.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun PhrasingContent.dateTimeInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.dateTime.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun PhrasingContent.dateTimeLocalInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.dateTimeLocal.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun PhrasingContent.emailInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.email.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun PhrasingContent.fileInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.file.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun PhrasingContent.hiddenInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.hidden.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun PhrasingContent.imageInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.image.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun PhrasingContent.monthInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.month.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun PhrasingContent.numberInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.number.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun PhrasingContent.passwordInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.password.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun PhrasingContent.radioInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.radio.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun PhrasingContent.rangeInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.range.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun PhrasingContent.resetInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.reset.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun PhrasingContent.searchInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.search.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun PhrasingContent.submitInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.submit.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun PhrasingContent.textInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.text.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun PhrasingContent.telInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.tel.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun PhrasingContent.timeInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.time.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun PhrasingContent.urlInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.url.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun PhrasingContent.weekInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit) : Unit = buildINPUT(listOf("type" to InputType.week.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun PhrasingContent.buttonInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.button.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun PhrasingContent.checkBoxInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.checkBox.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun PhrasingContent.colorInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.color.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun PhrasingContent.dateInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.date.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun PhrasingContent.dateTimeInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.dateTime.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun PhrasingContent.dateTimeLocalInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.dateTimeLocal.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun PhrasingContent.emailInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.email.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun PhrasingContent.fileInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.file.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun PhrasingContent.hiddenInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.hidden.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun PhrasingContent.imageInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.image.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun PhrasingContent.monthInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.month.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun PhrasingContent.numberInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.number.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun PhrasingContent.passwordInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.password.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun PhrasingContent.radioInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.radio.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun PhrasingContent.rangeInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.range.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun PhrasingContent.resetInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.reset.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun PhrasingContent.searchInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.search.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun PhrasingContent.submitInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.submit.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun PhrasingContent.textInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.text.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun PhrasingContent.telInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.tel.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun PhrasingContent.timeInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.time.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun PhrasingContent.urlInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.url.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun PhrasingContent.weekInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, content : String = "") : Unit = buildINPUT(listOf("type" to InputType.week.realValue,"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})

fun PhrasingContent.ins(classes : String? = null, block : INS.() -> Unit) : Unit = buildINS(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun PhrasingContent.kbd(classes : String? = null, block : KBD.() -> Unit) : Unit = buildKBD(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun PhrasingContent.keyGen(keyType : KeyGenKeyType? = null, classes : String? = null, block : KEYGEN.() -> Unit) : Unit = buildKEYGEN(listOf("keytype" to keyType?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun PhrasingContent.keyGen(keyType : KeyGenKeyType? = null, classes : String? = null, content : String = "") : Unit = buildKEYGEN(listOf("keytype" to keyType?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun PhrasingContent.rsaKeyGen(classes : String? = null, block : KEYGEN.() -> Unit) : Unit = buildKEYGEN(listOf("keytype" to KeyGenKeyType.rsa.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun PhrasingContent.rsaKeyGen(classes : String? = null, content : String = "") : Unit = buildKEYGEN(listOf("keytype" to KeyGenKeyType.rsa.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})

fun PhrasingContent.label(classes : String? = null, block : LABEL.() -> Unit) : Unit = buildLABEL(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun PhrasingContent.link(classes : String? = null, block : LINK.() -> Unit) : Unit = buildLINK(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun PhrasingContent.link(classes : String? = null, content : String = "") : Unit = buildLINK(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})

fun PhrasingContent.map(name : String? = null, classes : String? = null, block : MAP.() -> Unit) : Unit = buildMAP(listOf("name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun PhrasingContent.mark(classes : String? = null, block : MARK.() -> Unit) : Unit = buildMARK(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun PhrasingContent.math(classes : String? = null, block : MATH.() -> Unit) : Unit = buildMATH(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun PhrasingContent.meta(classes : String? = null, block : META.() -> Unit) : Unit = buildMETA(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun PhrasingContent.meta(classes : String? = null, content : String = "") : Unit = buildMETA(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})

fun PhrasingContent.meter(classes : String? = null, block : METER.() -> Unit) : Unit = buildMETER(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun PhrasingContent.noScript(classes : String? = null, block : NOSCRIPT.() -> Unit) : Unit = buildNOSCRIPT(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun PhrasingContent.object_(classes : String? = null, block : OBJECT_.() -> Unit) : Unit = buildOBJECT_(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun PhrasingContent.output(classes : String? = null, block : OUTPUT.() -> Unit) : Unit = buildOUTPUT(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun PhrasingContent.progress(classes : String? = null, block : PROGRESS.() -> Unit) : Unit = buildPROGRESS(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun PhrasingContent.q(classes : String? = null, block : Q.() -> Unit) : Unit = buildQ(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun PhrasingContent.ruby(classes : String? = null, block : RUBY.() -> Unit) : Unit = buildRUBY(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun PhrasingContent.samp(classes : String? = null, block : SAMP.() -> Unit) : Unit = buildSAMP(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun PhrasingContent.script(type : ScriptType? = null, src : String? = null, block : SCRIPT.() -> Unit) : Unit = buildSCRIPT(listOf("type" to type?.enumEncode(),"src" to src).toAttributesMap(), consumer, block)
fun PhrasingContent.script(type : ScriptType? = null, src : String? = null, content : String = "") : Unit = buildSCRIPT(listOf("type" to type?.enumEncode(),"src" to src).toAttributesMap(), consumer, {+content})
fun PhrasingContent.textEcmaScriptScript(src : String? = null, block : SCRIPT.() -> Unit) : Unit = buildSCRIPT(listOf("type" to ScriptType.textEcmaScript.realValue,"src" to src).toAttributesMap(), consumer, block)
fun PhrasingContent.textJavaScriptScript(src : String? = null, block : SCRIPT.() -> Unit) : Unit = buildSCRIPT(listOf("type" to ScriptType.textJavaScript.realValue,"src" to src).toAttributesMap(), consumer, block)
fun PhrasingContent.textJavaScript10Script(src : String? = null, block : SCRIPT.() -> Unit) : Unit = buildSCRIPT(listOf("type" to ScriptType.textJavaScript10.realValue,"src" to src).toAttributesMap(), consumer, block)
fun PhrasingContent.textJavaScript11Script(src : String? = null, block : SCRIPT.() -> Unit) : Unit = buildSCRIPT(listOf("type" to ScriptType.textJavaScript11.realValue,"src" to src).toAttributesMap(), consumer, block)
fun PhrasingContent.textJavaScript12Script(src : String? = null, block : SCRIPT.() -> Unit) : Unit = buildSCRIPT(listOf("type" to ScriptType.textJavaScript12.realValue,"src" to src).toAttributesMap(), consumer, block)
fun PhrasingContent.textJavaScript13Script(src : String? = null, block : SCRIPT.() -> Unit) : Unit = buildSCRIPT(listOf("type" to ScriptType.textJavaScript13.realValue,"src" to src).toAttributesMap(), consumer, block)
fun PhrasingContent.textJavaScript14Script(src : String? = null, block : SCRIPT.() -> Unit) : Unit = buildSCRIPT(listOf("type" to ScriptType.textJavaScript14.realValue,"src" to src).toAttributesMap(), consumer, block)
fun PhrasingContent.textJavaScript15Script(src : String? = null, block : SCRIPT.() -> Unit) : Unit = buildSCRIPT(listOf("type" to ScriptType.textJavaScript15.realValue,"src" to src).toAttributesMap(), consumer, block)
fun PhrasingContent.textJScriptScript(src : String? = null, block : SCRIPT.() -> Unit) : Unit = buildSCRIPT(listOf("type" to ScriptType.textJScript.realValue,"src" to src).toAttributesMap(), consumer, block)
fun PhrasingContent.textXJavaScriptScript(src : String? = null, block : SCRIPT.() -> Unit) : Unit = buildSCRIPT(listOf("type" to ScriptType.textXJavaScript.realValue,"src" to src).toAttributesMap(), consumer, block)
fun PhrasingContent.textXEcmaScriptScript(src : String? = null, block : SCRIPT.() -> Unit) : Unit = buildSCRIPT(listOf("type" to ScriptType.textXEcmaScript.realValue,"src" to src).toAttributesMap(), consumer, block)
fun PhrasingContent.textVbScriptScript(src : String? = null, block : SCRIPT.() -> Unit) : Unit = buildSCRIPT(listOf("type" to ScriptType.textVbScript.realValue,"src" to src).toAttributesMap(), consumer, block)
fun PhrasingContent.textEcmaScriptScript(src : String? = null, content : String = "") : Unit = buildSCRIPT(listOf("type" to ScriptType.textEcmaScript.realValue,"src" to src).toAttributesMap(), consumer, {+content})
fun PhrasingContent.textJavaScriptScript(src : String? = null, content : String = "") : Unit = buildSCRIPT(listOf("type" to ScriptType.textJavaScript.realValue,"src" to src).toAttributesMap(), consumer, {+content})
fun PhrasingContent.textJavaScript10Script(src : String? = null, content : String = "") : Unit = buildSCRIPT(listOf("type" to ScriptType.textJavaScript10.realValue,"src" to src).toAttributesMap(), consumer, {+content})
fun PhrasingContent.textJavaScript11Script(src : String? = null, content : String = "") : Unit = buildSCRIPT(listOf("type" to ScriptType.textJavaScript11.realValue,"src" to src).toAttributesMap(), consumer, {+content})
fun PhrasingContent.textJavaScript12Script(src : String? = null, content : String = "") : Unit = buildSCRIPT(listOf("type" to ScriptType.textJavaScript12.realValue,"src" to src).toAttributesMap(), consumer, {+content})
fun PhrasingContent.textJavaScript13Script(src : String? = null, content : String = "") : Unit = buildSCRIPT(listOf("type" to ScriptType.textJavaScript13.realValue,"src" to src).toAttributesMap(), consumer, {+content})
fun PhrasingContent.textJavaScript14Script(src : String? = null, content : String = "") : Unit = buildSCRIPT(listOf("type" to ScriptType.textJavaScript14.realValue,"src" to src).toAttributesMap(), consumer, {+content})
fun PhrasingContent.textJavaScript15Script(src : String? = null, content : String = "") : Unit = buildSCRIPT(listOf("type" to ScriptType.textJavaScript15.realValue,"src" to src).toAttributesMap(), consumer, {+content})
fun PhrasingContent.textJScriptScript(src : String? = null, content : String = "") : Unit = buildSCRIPT(listOf("type" to ScriptType.textJScript.realValue,"src" to src).toAttributesMap(), consumer, {+content})
fun PhrasingContent.textXJavaScriptScript(src : String? = null, content : String = "") : Unit = buildSCRIPT(listOf("type" to ScriptType.textXJavaScript.realValue,"src" to src).toAttributesMap(), consumer, {+content})
fun PhrasingContent.textXEcmaScriptScript(src : String? = null, content : String = "") : Unit = buildSCRIPT(listOf("type" to ScriptType.textXEcmaScript.realValue,"src" to src).toAttributesMap(), consumer, {+content})
fun PhrasingContent.textVbScriptScript(src : String? = null, content : String = "") : Unit = buildSCRIPT(listOf("type" to ScriptType.textVbScript.realValue,"src" to src).toAttributesMap(), consumer, {+content})

fun PhrasingContent.select(classes : String? = null, block : SELECT.() -> Unit) : Unit = buildSELECT(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun PhrasingContent.small(classes : String? = null, block : SMALL.() -> Unit) : Unit = buildSMALL(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun PhrasingContent.span(classes : String? = null, block : SPAN.() -> Unit) : Unit = buildSPAN(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun PhrasingContent.strong(classes : String? = null, block : STRONG.() -> Unit) : Unit = buildSTRONG(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun PhrasingContent.sub(classes : String? = null, block : SUB.() -> Unit) : Unit = buildSUB(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun PhrasingContent.sup(classes : String? = null, block : SUP.() -> Unit) : Unit = buildSUP(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun PhrasingContent.svg(classes : String? = null, block : SVG.() -> Unit) : Unit = buildSVG(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun PhrasingContent.svg(classes : String? = null, content : String = "") : Unit = buildSVG(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})

fun PhrasingContent.textArea(rows : String? = null, cols : String? = null, wrap : TextAreaWrap? = null, classes : String? = null, block : TEXTAREA.() -> Unit) : Unit = buildTEXTAREA(listOf("rows" to rows,"cols" to cols,"wrap" to wrap?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun PhrasingContent.textArea(rows : String? = null, cols : String? = null, wrap : TextAreaWrap? = null, classes : String? = null, content : String = "") : Unit = buildTEXTAREA(listOf("rows" to rows,"cols" to cols,"wrap" to wrap?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun PhrasingContent.hardTextArea(rows : String? = null, cols : String? = null, classes : String? = null, block : TEXTAREA.() -> Unit) : Unit = buildTEXTAREA(listOf("rows" to rows,"cols" to cols,"wrap" to TextAreaWrap.hard.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun PhrasingContent.softTextArea(rows : String? = null, cols : String? = null, classes : String? = null, block : TEXTAREA.() -> Unit) : Unit = buildTEXTAREA(listOf("rows" to rows,"cols" to cols,"wrap" to TextAreaWrap.soft.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)
fun PhrasingContent.hardTextArea(rows : String? = null, cols : String? = null, classes : String? = null, content : String = "") : Unit = buildTEXTAREA(listOf("rows" to rows,"cols" to cols,"wrap" to TextAreaWrap.hard.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})
fun PhrasingContent.softTextArea(rows : String? = null, cols : String? = null, classes : String? = null, content : String = "") : Unit = buildTEXTAREA(listOf("rows" to rows,"cols" to cols,"wrap" to TextAreaWrap.soft.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, {+content})

fun PhrasingContent.time(classes : String? = null, block : TIME.() -> Unit) : Unit = buildTIME(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun PhrasingContent.var_(classes : String? = null, block : VAR_.() -> Unit) : Unit = buildVAR_(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun PhrasingContent.video(classes : String? = null, block : VIDEO.() -> Unit) : Unit = buildVIDEO(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun SectioningContent.article(classes : String? = null, block : ARTICLE.() -> Unit) : Unit = buildARTICLE(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun SectioningContent.aside(classes : String? = null, block : ASIDE.() -> Unit) : Unit = buildASIDE(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun SectioningContent.nav(classes : String? = null, block : NAV.() -> Unit) : Unit = buildNAV(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)

fun SectioningContent.section(classes : String? = null, block : SECTION.() -> Unit) : Unit = buildSECTION(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer, block)


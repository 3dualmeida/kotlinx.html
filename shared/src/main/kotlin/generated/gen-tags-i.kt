package html4k

import html4k.*
import html4k.impl.*

/*******************************************************************************
    DO NOT EDIT
    This file was generated by module generate
*******************************************************************************/

public class I(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("i", consumer, initialAttributes), CommonEventsGroupFacade, CoreAttributeGroupFacade, CoreServerAttributeGroupFacade {

    override
    fun a(href : String?, target : String?, block : A.() -> Unit) : Unit = super<HTMLTag>.a(href, target, block)

    override
    fun abbr(block : ABBR.() -> Unit) : Unit = super<HTMLTag>.abbr(block)

    override
    fun area(alt : String?, content : String) : Unit = super<HTMLTag>.area(alt, content)

    override
    fun audio(block : AUDIO.() -> Unit) : Unit = super<HTMLTag>.audio(block)

    override
    fun b(block : B.() -> Unit) : Unit = super<HTMLTag>.b(block)

    override
    fun bdi(block : BDI.() -> Unit) : Unit = super<HTMLTag>.bdi(block)

    override
    fun bdo(block : BDO.() -> Unit) : Unit = super<HTMLTag>.bdo(block)

    override
    fun br(content : String) : Unit = super<HTMLTag>.br(content)

    override
    fun button(block : BUTTON.() -> Unit) : Unit = super<HTMLTag>.button(block)

    override
    fun canvas(content : String) : Unit = super<HTMLTag>.canvas(content)

    override
    fun cite(block : CITE.() -> Unit) : Unit = super<HTMLTag>.cite(block)

    override
    fun code(block : CODE.() -> Unit) : Unit = super<HTMLTag>.code(block)

    override
    fun command(content : String) : Unit = super<HTMLTag>.command(content)

    override
    fun dataList(block : DATALIST.() -> Unit) : Unit = super<HTMLTag>.dataList(block)

    override
    fun del(block : DEL.() -> Unit) : Unit = super<HTMLTag>.del(block)

    override
    fun dfn(block : DFN.() -> Unit) : Unit = super<HTMLTag>.dfn(block)

    override
    fun em(block : EM.() -> Unit) : Unit = super<HTMLTag>.em(block)

    override
    fun embed(content : String) : Unit = super<HTMLTag>.embed(content)

    override
    fun i(block : I.() -> Unit) : Unit = super<HTMLTag>.i(block)

    override
    fun iframe(content : String) : Unit = super<HTMLTag>.iframe(content)

    override
    fun img(alt : String?, src : String?, content : String) : Unit = super<HTMLTag>.img(alt, src, content)

    override
    fun input(alt : String?, content : String) : Unit = super<HTMLTag>.input(alt, content)

    override
    fun ins(block : INS.() -> Unit) : Unit = super<HTMLTag>.ins(block)

    override
    fun kbd(block : KBD.() -> Unit) : Unit = super<HTMLTag>.kbd(block)

    override
    fun keyGen(content : String) : Unit = super<HTMLTag>.keyGen(content)

    override
    fun label(block : LABEL.() -> Unit) : Unit = super<HTMLTag>.label(block)

    override
    fun link(content : String) : Unit = super<HTMLTag>.link(content)

    override
    fun map(block : MAP.() -> Unit) : Unit = super<HTMLTag>.map(block)

    override
    fun mark(block : MARK.() -> Unit) : Unit = super<HTMLTag>.mark(block)

    override
    fun math(block : MATH.() -> Unit) : Unit = super<HTMLTag>.math(block)

    override
    fun meta(content : String) : Unit = super<HTMLTag>.meta(content)

    override
    fun meter(block : METER.() -> Unit) : Unit = super<HTMLTag>.meter(block)

    override
    fun noScript(block : NOSCRIPT.() -> Unit) : Unit = super<HTMLTag>.noScript(block)

    override
    fun object_(block : OBJECT_.() -> Unit) : Unit = super<HTMLTag>.object_(block)

    override
    fun output(block : OUTPUT.() -> Unit) : Unit = super<HTMLTag>.output(block)

    override
    fun progress(block : PROGRESS.() -> Unit) : Unit = super<HTMLTag>.progress(block)

    override
    fun q(block : Q.() -> Unit) : Unit = super<HTMLTag>.q(block)

    override
    fun ruby(block : RUBY.() -> Unit) : Unit = super<HTMLTag>.ruby(block)

    override
    fun samp(block : SAMP.() -> Unit) : Unit = super<HTMLTag>.samp(block)

    override
    fun script(type : String?, src : String?, content : String) : Unit = super<HTMLTag>.script(type, src, content)

    override
    fun select(block : SELECT.() -> Unit) : Unit = super<HTMLTag>.select(block)

    override
    fun small(block : SMALL.() -> Unit) : Unit = super<HTMLTag>.small(block)

    override
    fun span(block : SPAN.() -> Unit) : Unit = super<HTMLTag>.span(block)

    override
    fun strong(block : STRONG.() -> Unit) : Unit = super<HTMLTag>.strong(block)

    override
    fun sub(block : SUB.() -> Unit) : Unit = super<HTMLTag>.sub(block)

    override
    fun sup(block : SUP.() -> Unit) : Unit = super<HTMLTag>.sup(block)

    override
    fun svg(content : String) : Unit = super<HTMLTag>.svg(content)

    override
    fun textArea(rowS : RowS?, colS : ColS?, content : String) : Unit = super<HTMLTag>.textArea(rowS, colS, content)

    override
    fun time(block : TIME.() -> Unit) : Unit = super<HTMLTag>.time(block)

    override
    fun var_(block : VAR_.() -> Unit) : Unit = super<HTMLTag>.var_(block)

    override
    fun video(block : VIDEO.() -> Unit) : Unit = super<HTMLTag>.video(block)

}

public class IFRAME(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("iframe", consumer, initialAttributes), CommonEventsGroupFacade, CoreAttributeGroupFacade, CoreServerAttributeGroupFacade {
    var width : String by attributeStringf30f39f0
    var src : String by attributeStringf30f39f0
    var height : String by attributeStringf30f39f0
    var seamless : Boolean by attributeBooleanSeamlessSeamlessEmptyb9c73a77
    var sandbox : Sandbox by attributeSandboxSandboxSandboxValues989672dc
    var name : String by attributeStringf30f39f0

}

public class IMG(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("img", consumer, initialAttributes), CommonEventsGroupFacade, CoreAttributeGroupFacade, CoreServerAttributeGroupFacade {
    var width : String by attributeStringf30f39f0
    var ismap : Boolean by attributeBooleanIsmapIsmapEmptyb1fabb17
    var src : String by attributeStringf30f39f0
    var usemap : String by attributeStringf30f39f0
    var height : String by attributeStringf30f39f0
    var alt : String by attributeStringf30f39f0

}

public class INPUT(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("input", consumer, initialAttributes), CommonEventsGroupFacade, CoreAttributeGroupFacade, CoreServerAttributeGroupFacade {
    var autoComplete : Boolean by attributeBooleanAutoCompleteOnOfffdc1e2af
    var formMethod : FormMethod by attributeFormMethodFormMethodFormMethodValues7a953fbe
    var maxlength : String by attributeStringf30f39f0
    var formNovalidate : Boolean by attributeBooleanFormNovalidateFormNovalidateEmpty2caba9f7
    var readonly : Boolean by attributeBooleanReadonlyReadonlyEmpty4b8e3117
    var height : String by attributeStringf30f39f0
    var pattern : String by attributeStringf30f39f0
    var value : String by attributeStringf30f39f0
    var required : Boolean by attributeBooleanRequiredRequiredEmptyadf5f977
    var formEncType : FormEncType by attributeFormEncTypeFormEncTypeFormEncTypeValues5f514f53
    var alt : String by attributeStringf30f39f0
    var formAction : String by attributeStringFormAction57b2208
    var checked : Boolean by attributeBooleanCheckedCheckedEmptyeed19877
    var multiple : Boolean by attributeBooleanMultipleMultipleEmpty7ef06f57
    var placeholder : String by attributeStringf30f39f0
    var form : String by attributeStringf30f39f0
    var list : String by attributeStringf30f39f0
    var formTarget : String by attributeStringFormTarget25ca1563
    var width : String by attributeStringf30f39f0
    var src : String by attributeStringf30f39f0
    var min : String by attributeStringf30f39f0
    var max : String by attributeStringf30f39f0
    var accept : String by attributeStringf30f39f0
    var type : String by attributeStringf30f39f0
    var disabled : Boolean by attributeBooleanDisabledDisabledEmptyf8f91d7
    var step : String by attributeStringf30f39f0
    var size : String by attributeStringf30f39f0
    var files : String by attributeStringf30f39f0

}

public class INS(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("ins", consumer, initialAttributes), CommonEventsGroupFacade, CoreAttributeGroupFacade, CoreServerAttributeGroupFacade {
    var dateTime : String by attributeStringDateTime5df8f589
    var cite : String by attributeStringf30f39f0

    override
    fun a(href : String?, target : String?, block : A.() -> Unit) : Unit = super<HTMLTag>.a(href, target, block)

    override
    fun abbr(block : ABBR.() -> Unit) : Unit = super<HTMLTag>.abbr(block)

    override
    fun area(alt : String?, content : String) : Unit = super<HTMLTag>.area(alt, content)

    override
    fun audio(block : AUDIO.() -> Unit) : Unit = super<HTMLTag>.audio(block)

    override
    fun b(block : B.() -> Unit) : Unit = super<HTMLTag>.b(block)

    override
    fun bdi(block : BDI.() -> Unit) : Unit = super<HTMLTag>.bdi(block)

    override
    fun bdo(block : BDO.() -> Unit) : Unit = super<HTMLTag>.bdo(block)

    override
    fun br(content : String) : Unit = super<HTMLTag>.br(content)

    override
    fun button(block : BUTTON.() -> Unit) : Unit = super<HTMLTag>.button(block)

    override
    fun canvas(content : String) : Unit = super<HTMLTag>.canvas(content)

    override
    fun cite(block : CITE.() -> Unit) : Unit = super<HTMLTag>.cite(block)

    override
    fun code(block : CODE.() -> Unit) : Unit = super<HTMLTag>.code(block)

    override
    fun command(content : String) : Unit = super<HTMLTag>.command(content)

    override
    fun dataList(block : DATALIST.() -> Unit) : Unit = super<HTMLTag>.dataList(block)

    override
    fun del(block : DEL.() -> Unit) : Unit = super<HTMLTag>.del(block)

    override
    fun dfn(block : DFN.() -> Unit) : Unit = super<HTMLTag>.dfn(block)

    override
    fun em(block : EM.() -> Unit) : Unit = super<HTMLTag>.em(block)

    override
    fun embed(content : String) : Unit = super<HTMLTag>.embed(content)

    override
    fun i(block : I.() -> Unit) : Unit = super<HTMLTag>.i(block)

    override
    fun iframe(content : String) : Unit = super<HTMLTag>.iframe(content)

    override
    fun img(alt : String?, src : String?, content : String) : Unit = super<HTMLTag>.img(alt, src, content)

    override
    fun input(alt : String?, content : String) : Unit = super<HTMLTag>.input(alt, content)

    override
    fun ins(block : INS.() -> Unit) : Unit = super<HTMLTag>.ins(block)

    override
    fun kbd(block : KBD.() -> Unit) : Unit = super<HTMLTag>.kbd(block)

    override
    fun keyGen(content : String) : Unit = super<HTMLTag>.keyGen(content)

    override
    fun label(block : LABEL.() -> Unit) : Unit = super<HTMLTag>.label(block)

    override
    fun link(content : String) : Unit = super<HTMLTag>.link(content)

    override
    fun map(block : MAP.() -> Unit) : Unit = super<HTMLTag>.map(block)

    override
    fun mark(block : MARK.() -> Unit) : Unit = super<HTMLTag>.mark(block)

    override
    fun math(block : MATH.() -> Unit) : Unit = super<HTMLTag>.math(block)

    override
    fun meta(content : String) : Unit = super<HTMLTag>.meta(content)

    override
    fun meter(block : METER.() -> Unit) : Unit = super<HTMLTag>.meter(block)

    override
    fun noScript(block : NOSCRIPT.() -> Unit) : Unit = super<HTMLTag>.noScript(block)

    override
    fun object_(block : OBJECT_.() -> Unit) : Unit = super<HTMLTag>.object_(block)

    override
    fun output(block : OUTPUT.() -> Unit) : Unit = super<HTMLTag>.output(block)

    override
    fun progress(block : PROGRESS.() -> Unit) : Unit = super<HTMLTag>.progress(block)

    override
    fun q(block : Q.() -> Unit) : Unit = super<HTMLTag>.q(block)

    override
    fun ruby(block : RUBY.() -> Unit) : Unit = super<HTMLTag>.ruby(block)

    override
    fun samp(block : SAMP.() -> Unit) : Unit = super<HTMLTag>.samp(block)

    override
    fun script(type : String?, src : String?, content : String) : Unit = super<HTMLTag>.script(type, src, content)

    override
    fun select(block : SELECT.() -> Unit) : Unit = super<HTMLTag>.select(block)

    override
    fun small(block : SMALL.() -> Unit) : Unit = super<HTMLTag>.small(block)

    override
    fun span(block : SPAN.() -> Unit) : Unit = super<HTMLTag>.span(block)

    override
    fun strong(block : STRONG.() -> Unit) : Unit = super<HTMLTag>.strong(block)

    override
    fun sub(block : SUB.() -> Unit) : Unit = super<HTMLTag>.sub(block)

    override
    fun sup(block : SUP.() -> Unit) : Unit = super<HTMLTag>.sup(block)

    override
    fun svg(content : String) : Unit = super<HTMLTag>.svg(content)

    override
    fun textArea(rowS : RowS?, colS : ColS?, content : String) : Unit = super<HTMLTag>.textArea(rowS, colS, content)

    override
    fun time(block : TIME.() -> Unit) : Unit = super<HTMLTag>.time(block)

    override
    fun var_(block : VAR_.() -> Unit) : Unit = super<HTMLTag>.var_(block)

    override
    fun video(block : VIDEO.() -> Unit) : Unit = super<HTMLTag>.video(block)

}


package kotlinx.html

import kotlinx.html.*
import kotlinx.html.impl.*
import kotlinx.html.attributes.*

/*******************************************************************************
    DO NOT EDIT
    This file was generated by module generate
*******************************************************************************/

open class TABLE(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("table", consumer, initialAttributes), CommonAttributeGroupFacade {
    var summary : String
        get()  = attributeStringString.get(this, "summary")
        set(newValue) {attributeStringString.set(this, "summary", newValue)}


}
fun TABLE.caption(classes : String? = null, block : CAPTION.() -> Unit = {}) : Unit = CAPTION(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer).visit(block)

fun TABLE.colGroup(classes : String? = null, block : COLGROUP.() -> Unit = {}) : Unit = COLGROUP(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer).visit(block)

fun TABLE.thead(classes : String? = null, block : THEAD.() -> Unit = {}) : Unit = THEAD(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer).visit(block)

fun TABLE.tfoot(classes : String? = null, block : TFOOT.() -> Unit = {}) : Unit = TFOOT(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer).visit(block)

fun TABLE.tbody(classes : String? = null, block : TBODY.() -> Unit = {}) : Unit = TBODY(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer).visit(block)

fun TABLE.tr(classes : String? = null, block : TR.() -> Unit = {}) : Unit = TR(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer).visit(block)


open class TBODY(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("tbody", consumer, initialAttributes), CommonAttributeGroupFacade {

}
fun TBODY.tr(classes : String? = null, block : TR.() -> Unit = {}) : Unit = TR(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer).visit(block)


open class TD(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("td", consumer, initialAttributes), CommonAttributeGroupFacadeFlowContent {
    var headers : String
        get()  = attributeStringString.get(this, "headers")
        set(newValue) {attributeStringString.set(this, "headers", newValue)}

    var rowSpan : String
        get()  = attributeStringString.get(this, "rowspan")
        set(newValue) {attributeStringString.set(this, "rowspan", newValue)}

    var colSpan : String
        get()  = attributeStringString.get(this, "colspan")
        set(newValue) {attributeStringString.set(this, "colspan", newValue)}


}

open class TEXTAREA(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("textarea", consumer, initialAttributes), CommonAttributeGroupFacade {
    var autoFocus : Boolean
        get()  = attributeBooleanTicker.get(this, "autofocus")
        set(newValue) {attributeBooleanTicker.set(this, "autofocus", newValue)}

    var disabled : Boolean
        get()  = attributeBooleanTicker.get(this, "disabled")
        set(newValue) {attributeBooleanTicker.set(this, "disabled", newValue)}

    var form : String
        get()  = attributeStringString.get(this, "form")
        set(newValue) {attributeStringString.set(this, "form", newValue)}

    var maxLength : String
        get()  = attributeStringString.get(this, "maxlength")
        set(newValue) {attributeStringString.set(this, "maxlength", newValue)}

    var name : String
        get()  = attributeStringString.get(this, "name")
        set(newValue) {attributeStringString.set(this, "name", newValue)}

    var placeholder : String
        get()  = attributeStringString.get(this, "placeholder")
        set(newValue) {attributeStringString.set(this, "placeholder", newValue)}

    var readonly : Boolean
        get()  = attributeBooleanTicker.get(this, "readonly")
        set(newValue) {attributeBooleanTicker.set(this, "readonly", newValue)}

    var required : Boolean
        get()  = attributeBooleanTicker.get(this, "required")
        set(newValue) {attributeBooleanTicker.set(this, "required", newValue)}

    var rows : String
        get()  = attributeStringString.get(this, "rows")
        set(newValue) {attributeStringString.set(this, "rows", newValue)}

    var cols : String
        get()  = attributeStringString.get(this, "cols")
        set(newValue) {attributeStringString.set(this, "cols", newValue)}

    var wrap : TextAreaWrap
        get()  = attributeTextAreaWrapEnumTextAreaWrapValues.get(this, "wrap")
        set(newValue) {attributeTextAreaWrapEnumTextAreaWrapValues.set(this, "wrap", newValue)}


}

open class TFOOT(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("tfoot", consumer, initialAttributes), CommonAttributeGroupFacade {

}
fun TFOOT.tr(classes : String? = null, block : TR.() -> Unit = {}) : Unit = TR(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer).visit(block)


open class TH(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("th", consumer, initialAttributes), CommonAttributeGroupFacadePhrasingContent {
    var headers : String
        get()  = attributeStringString.get(this, "headers")
        set(newValue) {attributeStringString.set(this, "headers", newValue)}

    var rowSpan : String
        get()  = attributeStringString.get(this, "rowspan")
        set(newValue) {attributeStringString.set(this, "rowspan", newValue)}

    var colSpan : String
        get()  = attributeStringString.get(this, "colspan")
        set(newValue) {attributeStringString.set(this, "colspan", newValue)}

    var scope : ThScope
        get()  = attributeThScopeEnumThScopeValues.get(this, "scope")
        set(newValue) {attributeThScopeEnumThScopeValues.set(this, "scope", newValue)}


}

open class THEAD(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("thead", consumer, initialAttributes), CommonAttributeGroupFacade {

}
fun THEAD.tr(classes : String? = null, block : TR.() -> Unit = {}) : Unit = TR(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer).visit(block)


open class TIME(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("time", consumer, initialAttributes), CommonAttributeGroupFacadePhrasingContent {
    var dateTime : String
        get()  = attributeStringString.get(this, "datetime")
        set(newValue) {attributeStringString.set(this, "datetime", newValue)}


}

open class TITLE(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("title", consumer, initialAttributes), CommonAttributeGroupFacade {

}

open class TR(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("tr", consumer, initialAttributes), CommonAttributeGroupFacade {

}
fun TR.th(scope : ThScope? = null, classes : String? = null, block : TH.() -> Unit = {}) : Unit = TH(listOf("scope" to scope?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer).visit(block)
fun TR.colTh(classes : String? = null, block : TH.() -> Unit = {}) : Unit = TH(listOf("scope" to ThScope.col.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer).visit(block)
fun TR.colGroupTh(classes : String? = null, block : TH.() -> Unit = {}) : Unit = TH(listOf("scope" to ThScope.colGroup.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer).visit(block)
fun TR.rowTh(classes : String? = null, block : TH.() -> Unit = {}) : Unit = TH(listOf("scope" to ThScope.row.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer).visit(block)
fun TR.rowGroupTh(classes : String? = null, block : TH.() -> Unit = {}) : Unit = TH(listOf("scope" to ThScope.rowGroup.realValue,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer).visit(block)

fun TR.td(classes : String? = null, block : TD.() -> Unit = {}) : Unit = TD(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), consumer).visit(block)



package html4k

import html4k.*
import html4k.impl.*
import html4k.attributes.*

/*******************************************************************************
    DO NOT EDIT
    This file was generated by module generate
*******************************************************************************/

public open class TABLE(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("table", consumer, initialAttributes), CommonEventsGroupFacade, CoreServerAttributeGroupFacade, CoreAttributeGroupFacade {
    var summary : String
        get()  = attributeString_5f39f85b.get(this, "summary")
        set(newValue) {attributeString_5f39f85b.set(this, "summary", newValue)}


}
fun TABLE.caption(block : CAPTION.() -> Unit) : Unit = buildCAPTION(emptyMap(), consumer, block)

fun TABLE.colGroup(block : COLGROUP.() -> Unit) : Unit = buildCOLGROUP(emptyMap(), consumer, block)

fun TABLE.thead(block : THEAD.() -> Unit) : Unit = buildTHEAD(emptyMap(), consumer, block)

fun TABLE.tfoot(block : TFOOT.() -> Unit) : Unit = buildTFOOT(emptyMap(), consumer, block)

fun TABLE.tbody(block : TBODY.() -> Unit) : Unit = buildTBODY(emptyMap(), consumer, block)

fun TABLE.tr(block : TR.() -> Unit) : Unit = buildTR(emptyMap(), consumer, block)


public open class TBODY(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("tbody", consumer, initialAttributes), CommonEventsGroupFacade, CoreServerAttributeGroupFacade, CoreAttributeGroupFacade {

}
fun TBODY.tr(block : TR.() -> Unit) : Unit = buildTR(emptyMap(), consumer, block)


public open class TD(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("td", consumer, initialAttributes), CommonEventsGroupFacade, CoreServerAttributeGroupFacade, CoreAttributeGroupFacade, FlowContent {
    var headers : String
        get()  = attributeString_5f39f85b.get(this, "headers")
        set(newValue) {attributeString_5f39f85b.set(this, "headers", newValue)}

    var rowSpan : String
        get()  = attributeString_5f39f85b.get(this, "rowspan")
        set(newValue) {attributeString_5f39f85b.set(this, "rowspan", newValue)}

    var colSpan : String
        get()  = attributeString_5f39f85b.get(this, "colspan")
        set(newValue) {attributeString_5f39f85b.set(this, "colspan", newValue)}


}

public open class TEXTAREA(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("textarea", consumer, initialAttributes), CommonEventsGroupFacade, CoreServerAttributeGroupFacade, CoreAttributeGroupFacade {
    var autoFocus : Boolean
        get()  = attributeBoolean_262196e6.get(this, "autofocus")
        set(newValue) {attributeBoolean_262196e6.set(this, "autofocus", newValue)}

    var disabled : Boolean
        get()  = attributeBoolean_262196e6.get(this, "disabled")
        set(newValue) {attributeBoolean_262196e6.set(this, "disabled", newValue)}

    var form : String
        get()  = attributeString_5f39f85b.get(this, "form")
        set(newValue) {attributeString_5f39f85b.set(this, "form", newValue)}

    var maxLength : String
        get()  = attributeString_5f39f85b.get(this, "maxlength")
        set(newValue) {attributeString_5f39f85b.set(this, "maxlength", newValue)}

    var name : String
        get()  = attributeString_5f39f85b.get(this, "name")
        set(newValue) {attributeString_5f39f85b.set(this, "name", newValue)}

    var placeholder : String
        get()  = attributeString_5f39f85b.get(this, "placeholder")
        set(newValue) {attributeString_5f39f85b.set(this, "placeholder", newValue)}

    var readonly : Boolean
        get()  = attributeBoolean_262196e6.get(this, "readonly")
        set(newValue) {attributeBoolean_262196e6.set(this, "readonly", newValue)}

    var required : Boolean
        get()  = attributeBoolean_262196e6.get(this, "required")
        set(newValue) {attributeBoolean_262196e6.set(this, "required", newValue)}

    var rows : String
        get()  = attributeString_5f39f85b.get(this, "rows")
        set(newValue) {attributeString_5f39f85b.set(this, "rows", newValue)}

    var cols : String
        get()  = attributeString_5f39f85b.get(this, "cols")
        set(newValue) {attributeString_5f39f85b.set(this, "cols", newValue)}

    var wrap : TextAreaWrap
        get()  = attributeTextAreaWrapTextAreaWrapValues_8855c9aa.get(this, "wrap")
        set(newValue) {attributeTextAreaWrapTextAreaWrapValues_8855c9aa.set(this, "wrap", newValue)}


}

public open class TFOOT(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("tfoot", consumer, initialAttributes), CommonEventsGroupFacade, CoreServerAttributeGroupFacade, CoreAttributeGroupFacade {

}
fun TFOOT.tr(block : TR.() -> Unit) : Unit = buildTR(emptyMap(), consumer, block)


public open class TH(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("th", consumer, initialAttributes), CommonEventsGroupFacade, CoreServerAttributeGroupFacade, CoreAttributeGroupFacade, PhrasingContent {
    var headers : String
        get()  = attributeString_5f39f85b.get(this, "headers")
        set(newValue) {attributeString_5f39f85b.set(this, "headers", newValue)}

    var rowSpan : String
        get()  = attributeString_5f39f85b.get(this, "rowspan")
        set(newValue) {attributeString_5f39f85b.set(this, "rowspan", newValue)}

    var colSpan : String
        get()  = attributeString_5f39f85b.get(this, "colspan")
        set(newValue) {attributeString_5f39f85b.set(this, "colspan", newValue)}

    var scope : ThScope
        get()  = attributeThScopeThScopeValues_19c8a06a.get(this, "scope")
        set(newValue) {attributeThScopeThScopeValues_19c8a06a.set(this, "scope", newValue)}


}

public open class THEAD(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("thead", consumer, initialAttributes), CommonEventsGroupFacade, CoreServerAttributeGroupFacade, CoreAttributeGroupFacade {

}
fun THEAD.tr(block : TR.() -> Unit) : Unit = buildTR(emptyMap(), consumer, block)


public open class TIME(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("time", consumer, initialAttributes), CommonEventsGroupFacade, CoreServerAttributeGroupFacade, CoreAttributeGroupFacade, PhrasingContent {
    var dateTime : String
        get()  = attributeString_5f39f85b.get(this, "datetime")
        set(newValue) {attributeString_5f39f85b.set(this, "datetime", newValue)}


}

public open class TITLE(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("title", consumer, initialAttributes), CommonEventsGroupFacade, CoreServerAttributeGroupFacade, CoreAttributeGroupFacade {

}

public open class TR(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("tr", consumer, initialAttributes), CommonEventsGroupFacade, CoreServerAttributeGroupFacade, CoreAttributeGroupFacade {

}
fun TR.th(scope : ThScope? = null, block : TH.() -> Unit) : Unit = buildTH(listOf("scope" to scope?.enumEncode()).toAttributesMap(), consumer, block)
fun TR.colTh(block : TH.() -> Unit) : Unit = buildTH(listOf("scope" to ThScope.col.realValue).toAttributesMap(), consumer, block)
fun TR.colGroupTh(block : TH.() -> Unit) : Unit = buildTH(listOf("scope" to ThScope.colGroup.realValue).toAttributesMap(), consumer, block)
fun TR.rowTh(block : TH.() -> Unit) : Unit = buildTH(listOf("scope" to ThScope.row.realValue).toAttributesMap(), consumer, block)
fun TR.rowGroupTh(block : TH.() -> Unit) : Unit = buildTH(listOf("scope" to ThScope.rowGroup.realValue).toAttributesMap(), consumer, block)

fun TR.td(block : TD.() -> Unit) : Unit = buildTD(emptyMap(), consumer, block)



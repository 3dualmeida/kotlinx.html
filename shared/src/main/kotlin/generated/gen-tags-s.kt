package html4k

import html4k.*
import html4k.impl.*

/*******************************************************************************
    DO NOT EDIT
    This file was generated by module generate
*******************************************************************************/

public open class SAMP(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("samp", consumer, initialAttributes), CommonEventsGroupFacade, CoreServerAttributeGroupFacade, CoreAttributeGroupFacade, PhrasingContent {

}

public open class SCRIPT(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("script", consumer, initialAttributes), CoreAttributeGroupFacade {
    var charset : String
        get()  = attributeString_38b4cae2.get(this, "charset")
        set(newValue) {attributeString_38b4cae2.set(this, "charset", newValue)}

    var type : ScriptType
        get()  = attributeScriptTypeScriptTypeValues_db8930b3.get(this, "type")
        set(newValue) {attributeScriptTypeScriptTypeValues_db8930b3.set(this, "type", newValue)}

    var src : String
        get()  = attributeString_38b4cae2.get(this, "src")
        set(newValue) {attributeString_38b4cae2.set(this, "src", newValue)}

    var defer : Boolean
        get()  = attributeBoolean_e6822d2.get(this, "defer")
        set(newValue) {attributeBoolean_e6822d2.set(this, "defer", newValue)}

    var async : Boolean
        get()  = attributeBoolean_e6822d2.get(this, "async")
        set(newValue) {attributeBoolean_e6822d2.set(this, "async", newValue)}


}

public open class SECTION(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("section", consumer, initialAttributes), CommonEventsGroupFacade, CoreServerAttributeGroupFacade, CoreAttributeGroupFacade, FlowContent {

}

public open class SELECT(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("select", consumer, initialAttributes), CommonEventsGroupFacade, CoreServerAttributeGroupFacade, CoreAttributeGroupFacade {
    var autoFocus : Boolean
        get()  = attributeBoolean_e6822d2.get(this, "autofocus")
        set(newValue) {attributeBoolean_e6822d2.set(this, "autofocus", newValue)}

    var disabled : Boolean
        get()  = attributeBoolean_e6822d2.get(this, "disabled")
        set(newValue) {attributeBoolean_e6822d2.set(this, "disabled", newValue)}

    var form : String
        get()  = attributeString_38b4cae2.get(this, "form")
        set(newValue) {attributeString_38b4cae2.set(this, "form", newValue)}

    var multiple : Boolean
        get()  = attributeBoolean_e6822d2.get(this, "multiple")
        set(newValue) {attributeBoolean_e6822d2.set(this, "multiple", newValue)}

    var name : String
        get()  = attributeString_38b4cae2.get(this, "name")
        set(newValue) {attributeString_38b4cae2.set(this, "name", newValue)}

    var size : String
        get()  = attributeString_38b4cae2.get(this, "size")
        set(newValue) {attributeString_38b4cae2.set(this, "size", newValue)}


}
fun SELECT.option(block : OPTION.() -> Unit) : Unit = buildOPTION(emptyMap(), consumer, block)
fun SELECT.option(content : String = "") : Unit = buildOPTION(emptyMap(), consumer, {+content})

fun SELECT.optGroup(label : String? = null, block : OPTGROUP.() -> Unit) : Unit = buildOPTGROUP(listOf("label" to label).toAttributesMap(), consumer, block)


public open class SMALL(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("small", consumer, initialAttributes), CommonEventsGroupFacade, CoreServerAttributeGroupFacade, CoreAttributeGroupFacade, PhrasingContent {

}

public open class SOURCE(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("source", consumer, initialAttributes), CommonEventsGroupFacade, CoreServerAttributeGroupFacade, CoreAttributeGroupFacade {
    var src : String
        get()  = attributeString_38b4cae2.get(this, "src")
        set(newValue) {attributeString_38b4cae2.set(this, "src", newValue)}

    var type : String
        get()  = attributeString_38b4cae2.get(this, "type")
        set(newValue) {attributeString_38b4cae2.set(this, "type", newValue)}

    var media : String
        get()  = attributeString_38b4cae2.get(this, "media")
        set(newValue) {attributeString_38b4cae2.set(this, "media", newValue)}


}

public open class SPAN(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("span", consumer, initialAttributes), CommonEventsGroupFacade, CoreServerAttributeGroupFacade, CoreAttributeGroupFacade, PhrasingContent {

}

public open class STRONG(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("strong", consumer, initialAttributes), CommonEventsGroupFacade, CoreServerAttributeGroupFacade, CoreAttributeGroupFacade, PhrasingContent {

}

public open class STYLE(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("style", consumer, initialAttributes), CommonEventsGroupFacade, CoreServerAttributeGroupFacade, CoreAttributeGroupFacade {
    var type : String
        get()  = attributeString_b747d7d7.get(this, "type")
        set(newValue) {attributeString_b747d7d7.set(this, "type", newValue)}

    var media : String
        get()  = attributeString_7f72406f.get(this, "media")
        set(newValue) {attributeString_7f72406f.set(this, "media", newValue)}

    var scoped : Boolean
        get()  = attributeBoolean_e6822d2.get(this, "scoped")
        set(newValue) {attributeBoolean_e6822d2.set(this, "scoped", newValue)}


}

public open class SUB(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("sub", consumer, initialAttributes), CommonEventsGroupFacade, CoreServerAttributeGroupFacade, CoreAttributeGroupFacade, PhrasingContent {

}

public open class SUP(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("sup", consumer, initialAttributes), CommonEventsGroupFacade, CoreServerAttributeGroupFacade, CoreAttributeGroupFacade, PhrasingContent {

}

public open class SVG(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("svg", consumer, initialAttributes), CommonEventsGroupFacade, CoreServerAttributeGroupFacade, CoreAttributeGroupFacade {

}


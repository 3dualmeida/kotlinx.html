package html4k

import html4k.*
import html4k.impl.*

/*******************************************************************************
    DO NOT EDIT
    This file was generated by module generate
*******************************************************************************/

public class SAMP(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("samp", consumer, initialAttributes), CommonEventsGroupFacade, CoreAttributeGroupFacade, CoreServerAttributeGroupFacade {

    override
    fun a(href : String?, target : String?, block : A.() -> Unit) : Unit = super<HTMLTag>.a(href, target, block)

    override
    fun abbr(block : ABBR.() -> Unit) : Unit = super<HTMLTag>.abbr(block)

    override
    fun area(alt : String?, content : String) : Unit = super<HTMLTag>.area(alt, content)

    override
    fun audio(block : AUDIO.() -> Unit) : Unit = super<HTMLTag>.audio(block)

    override
    fun b(block : B.() -> Unit) : Unit = super<HTMLTag>.b(block)

    override
    fun bdi(block : BDI.() -> Unit) : Unit = super<HTMLTag>.bdi(block)

    override
    fun bdo(block : BDO.() -> Unit) : Unit = super<HTMLTag>.bdo(block)

    override
    fun br(content : String) : Unit = super<HTMLTag>.br(content)

    override
    fun button(block : BUTTON.() -> Unit) : Unit = super<HTMLTag>.button(block)

    override
    fun canvas(content : String) : Unit = super<HTMLTag>.canvas(content)

    override
    fun cite(block : CITE.() -> Unit) : Unit = super<HTMLTag>.cite(block)

    override
    fun code(block : CODE.() -> Unit) : Unit = super<HTMLTag>.code(block)

    override
    fun command(content : String) : Unit = super<HTMLTag>.command(content)

    override
    fun dataList(block : DATALIST.() -> Unit) : Unit = super<HTMLTag>.dataList(block)

    override
    fun del(block : DEL.() -> Unit) : Unit = super<HTMLTag>.del(block)

    override
    fun dfn(block : DFN.() -> Unit) : Unit = super<HTMLTag>.dfn(block)

    override
    fun em(block : EM.() -> Unit) : Unit = super<HTMLTag>.em(block)

    override
    fun embed(content : String) : Unit = super<HTMLTag>.embed(content)

    override
    fun i(block : I.() -> Unit) : Unit = super<HTMLTag>.i(block)

    override
    fun iframe(content : String) : Unit = super<HTMLTag>.iframe(content)

    override
    fun img(alt : String?, src : String?, content : String) : Unit = super<HTMLTag>.img(alt, src, content)

    override
    fun input(alt : String?, content : String) : Unit = super<HTMLTag>.input(alt, content)

    override
    fun ins(block : INS.() -> Unit) : Unit = super<HTMLTag>.ins(block)

    override
    fun kbd(block : KBD.() -> Unit) : Unit = super<HTMLTag>.kbd(block)

    override
    fun keyGen(content : String) : Unit = super<HTMLTag>.keyGen(content)

    override
    fun label(block : LABEL.() -> Unit) : Unit = super<HTMLTag>.label(block)

    override
    fun link(content : String) : Unit = super<HTMLTag>.link(content)

    override
    fun map(block : MAP.() -> Unit) : Unit = super<HTMLTag>.map(block)

    override
    fun mark(block : MARK.() -> Unit) : Unit = super<HTMLTag>.mark(block)

    override
    fun math(block : MATH.() -> Unit) : Unit = super<HTMLTag>.math(block)

    override
    fun meta(content : String) : Unit = super<HTMLTag>.meta(content)

    override
    fun meter(block : METER.() -> Unit) : Unit = super<HTMLTag>.meter(block)

    override
    fun noScript(block : NOSCRIPT.() -> Unit) : Unit = super<HTMLTag>.noScript(block)

    override
    fun object_(block : OBJECT_.() -> Unit) : Unit = super<HTMLTag>.object_(block)

    override
    fun output(block : OUTPUT.() -> Unit) : Unit = super<HTMLTag>.output(block)

    override
    fun progress(block : PROGRESS.() -> Unit) : Unit = super<HTMLTag>.progress(block)

    override
    fun q(block : Q.() -> Unit) : Unit = super<HTMLTag>.q(block)

    override
    fun ruby(block : RUBY.() -> Unit) : Unit = super<HTMLTag>.ruby(block)

    override
    fun samp(block : SAMP.() -> Unit) : Unit = super<HTMLTag>.samp(block)

    override
    fun script(type : String?, src : String?, content : String) : Unit = super<HTMLTag>.script(type, src, content)

    override
    fun select(block : SELECT.() -> Unit) : Unit = super<HTMLTag>.select(block)

    override
    fun small(block : SMALL.() -> Unit) : Unit = super<HTMLTag>.small(block)

    override
    fun span(block : SPAN.() -> Unit) : Unit = super<HTMLTag>.span(block)

    override
    fun strong(block : STRONG.() -> Unit) : Unit = super<HTMLTag>.strong(block)

    override
    fun sub(block : SUB.() -> Unit) : Unit = super<HTMLTag>.sub(block)

    override
    fun sup(block : SUP.() -> Unit) : Unit = super<HTMLTag>.sup(block)

    override
    fun svg(content : String) : Unit = super<HTMLTag>.svg(content)

    override
    fun textArea(rowS : RowS?, colS : ColS?, content : String) : Unit = super<HTMLTag>.textArea(rowS, colS, content)

    override
    fun time(block : TIME.() -> Unit) : Unit = super<HTMLTag>.time(block)

    override
    fun var_(block : VAR_.() -> Unit) : Unit = super<HTMLTag>.var_(block)

    override
    fun video(block : VIDEO.() -> Unit) : Unit = super<HTMLTag>.video(block)

}

public class SCRIPT(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("script", consumer, initialAttributes), CoreAttributeGroupFacade {
    var charset : String by attributeStringf30f39f0
    var type : String by attributeStringf30f39f0
    var src : String by attributeStringf30f39f0
    var defer : Boolean by attributeBooleanDeferDeferEmpty87e64b17
    var async : Boolean by attributeBooleanAsyncAsyncEmptyfdd691d7

}

public class SECTION(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("section", consumer, initialAttributes), CommonEventsGroupFacade, CoreAttributeGroupFacade, CoreServerAttributeGroupFacade {

    override
    fun a(href : String?, target : String?, block : A.() -> Unit) : Unit = super<HTMLTag>.a(href, target, block)

    override
    fun abbr(block : ABBR.() -> Unit) : Unit = super<HTMLTag>.abbr(block)

    override
    fun address(block : ADDRESS.() -> Unit) : Unit = super<HTMLTag>.address(block)

    override
    fun area(alt : String?, content : String) : Unit = super<HTMLTag>.area(alt, content)

    override
    fun article(block : ARTICLE.() -> Unit) : Unit = super<HTMLTag>.article(block)

    override
    fun aside(block : ASIDE.() -> Unit) : Unit = super<HTMLTag>.aside(block)

    override
    fun audio(block : AUDIO.() -> Unit) : Unit = super<HTMLTag>.audio(block)

    override
    fun b(block : B.() -> Unit) : Unit = super<HTMLTag>.b(block)

    override
    fun bdi(block : BDI.() -> Unit) : Unit = super<HTMLTag>.bdi(block)

    override
    fun bdo(block : BDO.() -> Unit) : Unit = super<HTMLTag>.bdo(block)

    override
    fun blockQuote(block : BLOCKQUOTE.() -> Unit) : Unit = super<HTMLTag>.blockQuote(block)

    override
    fun br(content : String) : Unit = super<HTMLTag>.br(content)

    override
    fun button(block : BUTTON.() -> Unit) : Unit = super<HTMLTag>.button(block)

    override
    fun canvas(content : String) : Unit = super<HTMLTag>.canvas(content)

    override
    fun cite(block : CITE.() -> Unit) : Unit = super<HTMLTag>.cite(block)

    override
    fun code(block : CODE.() -> Unit) : Unit = super<HTMLTag>.code(block)

    override
    fun command(content : String) : Unit = super<HTMLTag>.command(content)

    override
    fun dataList(block : DATALIST.() -> Unit) : Unit = super<HTMLTag>.dataList(block)

    override
    fun del(block : DEL.() -> Unit) : Unit = super<HTMLTag>.del(block)

    override
    fun details(block : DETAILS.() -> Unit) : Unit = super<HTMLTag>.details(block)

    override
    fun dfn(block : DFN.() -> Unit) : Unit = super<HTMLTag>.dfn(block)

    override
    fun dialog(block : DIALOG.() -> Unit) : Unit = super<HTMLTag>.dialog(block)

    override
    fun div(classes : String?, block : DIV.() -> Unit) : Unit = super<HTMLTag>.div(classes, block)

    override
    fun dl(block : DL.() -> Unit) : Unit = super<HTMLTag>.dl(block)

    override
    fun em(block : EM.() -> Unit) : Unit = super<HTMLTag>.em(block)

    override
    fun embed(content : String) : Unit = super<HTMLTag>.embed(content)

    override
    fun fieldSet(block : FIELDSET.() -> Unit) : Unit = super<HTMLTag>.fieldSet(block)

    override
    fun figure(block : FIGURE.() -> Unit) : Unit = super<HTMLTag>.figure(block)

    override
    fun footer(block : FOOTER.() -> Unit) : Unit = super<HTMLTag>.footer(block)

    override
    fun form(action : String?, block : FORM.() -> Unit) : Unit = super<HTMLTag>.form(action, block)

    override
    fun h1(block : H1.() -> Unit) : Unit = super<HTMLTag>.h1(block)

    override
    fun h2(block : H2.() -> Unit) : Unit = super<HTMLTag>.h2(block)

    override
    fun h3(block : H3.() -> Unit) : Unit = super<HTMLTag>.h3(block)

    override
    fun h4(block : H4.() -> Unit) : Unit = super<HTMLTag>.h4(block)

    override
    fun h5(block : H5.() -> Unit) : Unit = super<HTMLTag>.h5(block)

    override
    fun h6(block : H6.() -> Unit) : Unit = super<HTMLTag>.h6(block)

    override
    fun header(block : HEADER.() -> Unit) : Unit = super<HTMLTag>.header(block)

    override
    fun hGroup(block : HGROUP.() -> Unit) : Unit = super<HTMLTag>.hGroup(block)

    override
    fun hr(content : String) : Unit = super<HTMLTag>.hr(content)

    override
    fun i(block : I.() -> Unit) : Unit = super<HTMLTag>.i(block)

    override
    fun iframe(content : String) : Unit = super<HTMLTag>.iframe(content)

    override
    fun img(alt : String?, src : String?, content : String) : Unit = super<HTMLTag>.img(alt, src, content)

    override
    fun input(alt : String?, content : String) : Unit = super<HTMLTag>.input(alt, content)

    override
    fun ins(block : INS.() -> Unit) : Unit = super<HTMLTag>.ins(block)

    override
    fun kbd(block : KBD.() -> Unit) : Unit = super<HTMLTag>.kbd(block)

    override
    fun keyGen(content : String) : Unit = super<HTMLTag>.keyGen(content)

    override
    fun label(block : LABEL.() -> Unit) : Unit = super<HTMLTag>.label(block)

    override
    fun link(content : String) : Unit = super<HTMLTag>.link(content)

    override
    fun map(block : MAP.() -> Unit) : Unit = super<HTMLTag>.map(block)

    override
    fun mark(block : MARK.() -> Unit) : Unit = super<HTMLTag>.mark(block)

    override
    fun math(block : MATH.() -> Unit) : Unit = super<HTMLTag>.math(block)

    override
    fun menu(block : MENU.() -> Unit) : Unit = super<HTMLTag>.menu(block)

    override
    fun meta(content : String) : Unit = super<HTMLTag>.meta(content)

    override
    fun meter(block : METER.() -> Unit) : Unit = super<HTMLTag>.meter(block)

    override
    fun nav(block : NAV.() -> Unit) : Unit = super<HTMLTag>.nav(block)

    override
    fun noScript(block : NOSCRIPT.() -> Unit) : Unit = super<HTMLTag>.noScript(block)

    override
    fun object_(block : OBJECT_.() -> Unit) : Unit = super<HTMLTag>.object_(block)

    override
    fun ol(block : OL.() -> Unit) : Unit = super<HTMLTag>.ol(block)

    override
    fun output(block : OUTPUT.() -> Unit) : Unit = super<HTMLTag>.output(block)

    override
    fun p(block : P.() -> Unit) : Unit = super<HTMLTag>.p(block)

    override
    fun pre(block : PRE.() -> Unit) : Unit = super<HTMLTag>.pre(block)

    override
    fun progress(block : PROGRESS.() -> Unit) : Unit = super<HTMLTag>.progress(block)

    override
    fun q(block : Q.() -> Unit) : Unit = super<HTMLTag>.q(block)

    override
    fun ruby(block : RUBY.() -> Unit) : Unit = super<HTMLTag>.ruby(block)

    override
    fun samp(block : SAMP.() -> Unit) : Unit = super<HTMLTag>.samp(block)

    override
    fun script(type : String?, src : String?, content : String) : Unit = super<HTMLTag>.script(type, src, content)

    override
    fun section(block : SECTION.() -> Unit) : Unit = super<HTMLTag>.section(block)

    override
    fun select(block : SELECT.() -> Unit) : Unit = super<HTMLTag>.select(block)

    override
    fun small(block : SMALL.() -> Unit) : Unit = super<HTMLTag>.small(block)

    override
    fun span(block : SPAN.() -> Unit) : Unit = super<HTMLTag>.span(block)

    override
    fun strong(block : STRONG.() -> Unit) : Unit = super<HTMLTag>.strong(block)

    override
    fun style(content : String) : Unit = super<HTMLTag>.style(content)

    override
    fun sub(block : SUB.() -> Unit) : Unit = super<HTMLTag>.sub(block)

    override
    fun sup(block : SUP.() -> Unit) : Unit = super<HTMLTag>.sup(block)

    override
    fun svg(content : String) : Unit = super<HTMLTag>.svg(content)

    override
    fun table(block : TABLE.() -> Unit) : Unit = super<HTMLTag>.table(block)

    override
    fun textArea(rowS : RowS?, colS : ColS?, content : String) : Unit = super<HTMLTag>.textArea(rowS, colS, content)

    override
    fun time(block : TIME.() -> Unit) : Unit = super<HTMLTag>.time(block)

    override
    fun ul(block : UL.() -> Unit) : Unit = super<HTMLTag>.ul(block)

    override
    fun var_(block : VAR_.() -> Unit) : Unit = super<HTMLTag>.var_(block)

    override
    fun video(block : VIDEO.() -> Unit) : Unit = super<HTMLTag>.video(block)

}

public class SELECT(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("select", consumer, initialAttributes), CommonEventsGroupFacade, CoreAttributeGroupFacade, CoreServerAttributeGroupFacade {
    var autoFocus : Boolean by attributeBooleanAutoFocusAutoFocusEmptya5698437
    var disabled : Boolean by attributeBooleanDisabledDisabledEmptyf8f91d7
    var size : String by attributeStringf30f39f0
    var multiple : Boolean by attributeBooleanMultipleMultipleEmpty7ef06f57
    var form : String by attributeStringf30f39f0
    var name : String by attributeStringf30f39f0

    override
    fun optGroup(block : OPTGROUP.() -> Unit) : Unit = super<HTMLTag>.optGroup(block)

    override
    fun option(content : String) : Unit = super<HTMLTag>.option(content)

}

public class SMALL(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("small", consumer, initialAttributes), CommonEventsGroupFacade, CoreAttributeGroupFacade, CoreServerAttributeGroupFacade {

    override
    fun a(href : String?, target : String?, block : A.() -> Unit) : Unit = super<HTMLTag>.a(href, target, block)

    override
    fun abbr(block : ABBR.() -> Unit) : Unit = super<HTMLTag>.abbr(block)

    override
    fun area(alt : String?, content : String) : Unit = super<HTMLTag>.area(alt, content)

    override
    fun audio(block : AUDIO.() -> Unit) : Unit = super<HTMLTag>.audio(block)

    override
    fun b(block : B.() -> Unit) : Unit = super<HTMLTag>.b(block)

    override
    fun bdi(block : BDI.() -> Unit) : Unit = super<HTMLTag>.bdi(block)

    override
    fun bdo(block : BDO.() -> Unit) : Unit = super<HTMLTag>.bdo(block)

    override
    fun br(content : String) : Unit = super<HTMLTag>.br(content)

    override
    fun button(block : BUTTON.() -> Unit) : Unit = super<HTMLTag>.button(block)

    override
    fun canvas(content : String) : Unit = super<HTMLTag>.canvas(content)

    override
    fun cite(block : CITE.() -> Unit) : Unit = super<HTMLTag>.cite(block)

    override
    fun code(block : CODE.() -> Unit) : Unit = super<HTMLTag>.code(block)

    override
    fun command(content : String) : Unit = super<HTMLTag>.command(content)

    override
    fun dataList(block : DATALIST.() -> Unit) : Unit = super<HTMLTag>.dataList(block)

    override
    fun del(block : DEL.() -> Unit) : Unit = super<HTMLTag>.del(block)

    override
    fun dfn(block : DFN.() -> Unit) : Unit = super<HTMLTag>.dfn(block)

    override
    fun em(block : EM.() -> Unit) : Unit = super<HTMLTag>.em(block)

    override
    fun embed(content : String) : Unit = super<HTMLTag>.embed(content)

    override
    fun i(block : I.() -> Unit) : Unit = super<HTMLTag>.i(block)

    override
    fun iframe(content : String) : Unit = super<HTMLTag>.iframe(content)

    override
    fun img(alt : String?, src : String?, content : String) : Unit = super<HTMLTag>.img(alt, src, content)

    override
    fun input(alt : String?, content : String) : Unit = super<HTMLTag>.input(alt, content)

    override
    fun ins(block : INS.() -> Unit) : Unit = super<HTMLTag>.ins(block)

    override
    fun kbd(block : KBD.() -> Unit) : Unit = super<HTMLTag>.kbd(block)

    override
    fun keyGen(content : String) : Unit = super<HTMLTag>.keyGen(content)

    override
    fun label(block : LABEL.() -> Unit) : Unit = super<HTMLTag>.label(block)

    override
    fun link(content : String) : Unit = super<HTMLTag>.link(content)

    override
    fun map(block : MAP.() -> Unit) : Unit = super<HTMLTag>.map(block)

    override
    fun mark(block : MARK.() -> Unit) : Unit = super<HTMLTag>.mark(block)

    override
    fun math(block : MATH.() -> Unit) : Unit = super<HTMLTag>.math(block)

    override
    fun meta(content : String) : Unit = super<HTMLTag>.meta(content)

    override
    fun meter(block : METER.() -> Unit) : Unit = super<HTMLTag>.meter(block)

    override
    fun noScript(block : NOSCRIPT.() -> Unit) : Unit = super<HTMLTag>.noScript(block)

    override
    fun object_(block : OBJECT_.() -> Unit) : Unit = super<HTMLTag>.object_(block)

    override
    fun output(block : OUTPUT.() -> Unit) : Unit = super<HTMLTag>.output(block)

    override
    fun progress(block : PROGRESS.() -> Unit) : Unit = super<HTMLTag>.progress(block)

    override
    fun q(block : Q.() -> Unit) : Unit = super<HTMLTag>.q(block)

    override
    fun ruby(block : RUBY.() -> Unit) : Unit = super<HTMLTag>.ruby(block)

    override
    fun samp(block : SAMP.() -> Unit) : Unit = super<HTMLTag>.samp(block)

    override
    fun script(type : String?, src : String?, content : String) : Unit = super<HTMLTag>.script(type, src, content)

    override
    fun select(block : SELECT.() -> Unit) : Unit = super<HTMLTag>.select(block)

    override
    fun small(block : SMALL.() -> Unit) : Unit = super<HTMLTag>.small(block)

    override
    fun span(block : SPAN.() -> Unit) : Unit = super<HTMLTag>.span(block)

    override
    fun strong(block : STRONG.() -> Unit) : Unit = super<HTMLTag>.strong(block)

    override
    fun sub(block : SUB.() -> Unit) : Unit = super<HTMLTag>.sub(block)

    override
    fun sup(block : SUP.() -> Unit) : Unit = super<HTMLTag>.sup(block)

    override
    fun svg(content : String) : Unit = super<HTMLTag>.svg(content)

    override
    fun textArea(rowS : RowS?, colS : ColS?, content : String) : Unit = super<HTMLTag>.textArea(rowS, colS, content)

    override
    fun time(block : TIME.() -> Unit) : Unit = super<HTMLTag>.time(block)

    override
    fun var_(block : VAR_.() -> Unit) : Unit = super<HTMLTag>.var_(block)

    override
    fun video(block : VIDEO.() -> Unit) : Unit = super<HTMLTag>.video(block)

}

public class SOURCE(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("source", consumer, initialAttributes), CommonEventsGroupFacade, CoreAttributeGroupFacade, CoreServerAttributeGroupFacade {
    var src : String by attributeStringf30f39f0
    var media : String by attributeStringf30f39f0
    var type : String by attributeStringf30f39f0

}

public class SPAN(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("span", consumer, initialAttributes), CommonEventsGroupFacade, CoreAttributeGroupFacade, CoreServerAttributeGroupFacade {

    override
    fun a(href : String?, target : String?, block : A.() -> Unit) : Unit = super<HTMLTag>.a(href, target, block)

    override
    fun abbr(block : ABBR.() -> Unit) : Unit = super<HTMLTag>.abbr(block)

    override
    fun area(alt : String?, content : String) : Unit = super<HTMLTag>.area(alt, content)

    override
    fun audio(block : AUDIO.() -> Unit) : Unit = super<HTMLTag>.audio(block)

    override
    fun b(block : B.() -> Unit) : Unit = super<HTMLTag>.b(block)

    override
    fun bdi(block : BDI.() -> Unit) : Unit = super<HTMLTag>.bdi(block)

    override
    fun bdo(block : BDO.() -> Unit) : Unit = super<HTMLTag>.bdo(block)

    override
    fun br(content : String) : Unit = super<HTMLTag>.br(content)

    override
    fun button(block : BUTTON.() -> Unit) : Unit = super<HTMLTag>.button(block)

    override
    fun canvas(content : String) : Unit = super<HTMLTag>.canvas(content)

    override
    fun cite(block : CITE.() -> Unit) : Unit = super<HTMLTag>.cite(block)

    override
    fun code(block : CODE.() -> Unit) : Unit = super<HTMLTag>.code(block)

    override
    fun command(content : String) : Unit = super<HTMLTag>.command(content)

    override
    fun dataList(block : DATALIST.() -> Unit) : Unit = super<HTMLTag>.dataList(block)

    override
    fun del(block : DEL.() -> Unit) : Unit = super<HTMLTag>.del(block)

    override
    fun dfn(block : DFN.() -> Unit) : Unit = super<HTMLTag>.dfn(block)

    override
    fun em(block : EM.() -> Unit) : Unit = super<HTMLTag>.em(block)

    override
    fun embed(content : String) : Unit = super<HTMLTag>.embed(content)

    override
    fun i(block : I.() -> Unit) : Unit = super<HTMLTag>.i(block)

    override
    fun iframe(content : String) : Unit = super<HTMLTag>.iframe(content)

    override
    fun img(alt : String?, src : String?, content : String) : Unit = super<HTMLTag>.img(alt, src, content)

    override
    fun input(alt : String?, content : String) : Unit = super<HTMLTag>.input(alt, content)

    override
    fun ins(block : INS.() -> Unit) : Unit = super<HTMLTag>.ins(block)

    override
    fun kbd(block : KBD.() -> Unit) : Unit = super<HTMLTag>.kbd(block)

    override
    fun keyGen(content : String) : Unit = super<HTMLTag>.keyGen(content)

    override
    fun label(block : LABEL.() -> Unit) : Unit = super<HTMLTag>.label(block)

    override
    fun link(content : String) : Unit = super<HTMLTag>.link(content)

    override
    fun map(block : MAP.() -> Unit) : Unit = super<HTMLTag>.map(block)

    override
    fun mark(block : MARK.() -> Unit) : Unit = super<HTMLTag>.mark(block)

    override
    fun math(block : MATH.() -> Unit) : Unit = super<HTMLTag>.math(block)

    override
    fun meta(content : String) : Unit = super<HTMLTag>.meta(content)

    override
    fun meter(block : METER.() -> Unit) : Unit = super<HTMLTag>.meter(block)

    override
    fun noScript(block : NOSCRIPT.() -> Unit) : Unit = super<HTMLTag>.noScript(block)

    override
    fun object_(block : OBJECT_.() -> Unit) : Unit = super<HTMLTag>.object_(block)

    override
    fun output(block : OUTPUT.() -> Unit) : Unit = super<HTMLTag>.output(block)

    override
    fun progress(block : PROGRESS.() -> Unit) : Unit = super<HTMLTag>.progress(block)

    override
    fun q(block : Q.() -> Unit) : Unit = super<HTMLTag>.q(block)

    override
    fun ruby(block : RUBY.() -> Unit) : Unit = super<HTMLTag>.ruby(block)

    override
    fun samp(block : SAMP.() -> Unit) : Unit = super<HTMLTag>.samp(block)

    override
    fun script(type : String?, src : String?, content : String) : Unit = super<HTMLTag>.script(type, src, content)

    override
    fun select(block : SELECT.() -> Unit) : Unit = super<HTMLTag>.select(block)

    override
    fun small(block : SMALL.() -> Unit) : Unit = super<HTMLTag>.small(block)

    override
    fun span(block : SPAN.() -> Unit) : Unit = super<HTMLTag>.span(block)

    override
    fun strong(block : STRONG.() -> Unit) : Unit = super<HTMLTag>.strong(block)

    override
    fun sub(block : SUB.() -> Unit) : Unit = super<HTMLTag>.sub(block)

    override
    fun sup(block : SUP.() -> Unit) : Unit = super<HTMLTag>.sup(block)

    override
    fun svg(content : String) : Unit = super<HTMLTag>.svg(content)

    override
    fun textArea(rowS : RowS?, colS : ColS?, content : String) : Unit = super<HTMLTag>.textArea(rowS, colS, content)

    override
    fun time(block : TIME.() -> Unit) : Unit = super<HTMLTag>.time(block)

    override
    fun var_(block : VAR_.() -> Unit) : Unit = super<HTMLTag>.var_(block)

    override
    fun video(block : VIDEO.() -> Unit) : Unit = super<HTMLTag>.video(block)

}

public class STRONG(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("strong", consumer, initialAttributes), CommonEventsGroupFacade, CoreAttributeGroupFacade, CoreServerAttributeGroupFacade {

    override
    fun a(href : String?, target : String?, block : A.() -> Unit) : Unit = super<HTMLTag>.a(href, target, block)

    override
    fun abbr(block : ABBR.() -> Unit) : Unit = super<HTMLTag>.abbr(block)

    override
    fun area(alt : String?, content : String) : Unit = super<HTMLTag>.area(alt, content)

    override
    fun audio(block : AUDIO.() -> Unit) : Unit = super<HTMLTag>.audio(block)

    override
    fun b(block : B.() -> Unit) : Unit = super<HTMLTag>.b(block)

    override
    fun bdi(block : BDI.() -> Unit) : Unit = super<HTMLTag>.bdi(block)

    override
    fun bdo(block : BDO.() -> Unit) : Unit = super<HTMLTag>.bdo(block)

    override
    fun br(content : String) : Unit = super<HTMLTag>.br(content)

    override
    fun button(block : BUTTON.() -> Unit) : Unit = super<HTMLTag>.button(block)

    override
    fun canvas(content : String) : Unit = super<HTMLTag>.canvas(content)

    override
    fun cite(block : CITE.() -> Unit) : Unit = super<HTMLTag>.cite(block)

    override
    fun code(block : CODE.() -> Unit) : Unit = super<HTMLTag>.code(block)

    override
    fun command(content : String) : Unit = super<HTMLTag>.command(content)

    override
    fun dataList(block : DATALIST.() -> Unit) : Unit = super<HTMLTag>.dataList(block)

    override
    fun del(block : DEL.() -> Unit) : Unit = super<HTMLTag>.del(block)

    override
    fun dfn(block : DFN.() -> Unit) : Unit = super<HTMLTag>.dfn(block)

    override
    fun em(block : EM.() -> Unit) : Unit = super<HTMLTag>.em(block)

    override
    fun embed(content : String) : Unit = super<HTMLTag>.embed(content)

    override
    fun i(block : I.() -> Unit) : Unit = super<HTMLTag>.i(block)

    override
    fun iframe(content : String) : Unit = super<HTMLTag>.iframe(content)

    override
    fun img(alt : String?, src : String?, content : String) : Unit = super<HTMLTag>.img(alt, src, content)

    override
    fun input(alt : String?, content : String) : Unit = super<HTMLTag>.input(alt, content)

    override
    fun ins(block : INS.() -> Unit) : Unit = super<HTMLTag>.ins(block)

    override
    fun kbd(block : KBD.() -> Unit) : Unit = super<HTMLTag>.kbd(block)

    override
    fun keyGen(content : String) : Unit = super<HTMLTag>.keyGen(content)

    override
    fun label(block : LABEL.() -> Unit) : Unit = super<HTMLTag>.label(block)

    override
    fun link(content : String) : Unit = super<HTMLTag>.link(content)

    override
    fun map(block : MAP.() -> Unit) : Unit = super<HTMLTag>.map(block)

    override
    fun mark(block : MARK.() -> Unit) : Unit = super<HTMLTag>.mark(block)

    override
    fun math(block : MATH.() -> Unit) : Unit = super<HTMLTag>.math(block)

    override
    fun meta(content : String) : Unit = super<HTMLTag>.meta(content)

    override
    fun meter(block : METER.() -> Unit) : Unit = super<HTMLTag>.meter(block)

    override
    fun noScript(block : NOSCRIPT.() -> Unit) : Unit = super<HTMLTag>.noScript(block)

    override
    fun object_(block : OBJECT_.() -> Unit) : Unit = super<HTMLTag>.object_(block)

    override
    fun output(block : OUTPUT.() -> Unit) : Unit = super<HTMLTag>.output(block)

    override
    fun progress(block : PROGRESS.() -> Unit) : Unit = super<HTMLTag>.progress(block)

    override
    fun q(block : Q.() -> Unit) : Unit = super<HTMLTag>.q(block)

    override
    fun ruby(block : RUBY.() -> Unit) : Unit = super<HTMLTag>.ruby(block)

    override
    fun samp(block : SAMP.() -> Unit) : Unit = super<HTMLTag>.samp(block)

    override
    fun script(type : String?, src : String?, content : String) : Unit = super<HTMLTag>.script(type, src, content)

    override
    fun select(block : SELECT.() -> Unit) : Unit = super<HTMLTag>.select(block)

    override
    fun small(block : SMALL.() -> Unit) : Unit = super<HTMLTag>.small(block)

    override
    fun span(block : SPAN.() -> Unit) : Unit = super<HTMLTag>.span(block)

    override
    fun strong(block : STRONG.() -> Unit) : Unit = super<HTMLTag>.strong(block)

    override
    fun sub(block : SUB.() -> Unit) : Unit = super<HTMLTag>.sub(block)

    override
    fun sup(block : SUP.() -> Unit) : Unit = super<HTMLTag>.sup(block)

    override
    fun svg(content : String) : Unit = super<HTMLTag>.svg(content)

    override
    fun textArea(rowS : RowS?, colS : ColS?, content : String) : Unit = super<HTMLTag>.textArea(rowS, colS, content)

    override
    fun time(block : TIME.() -> Unit) : Unit = super<HTMLTag>.time(block)

    override
    fun var_(block : VAR_.() -> Unit) : Unit = super<HTMLTag>.var_(block)

    override
    fun video(block : VIDEO.() -> Unit) : Unit = super<HTMLTag>.video(block)

}

public class STYLE(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("style", consumer, initialAttributes), CommonEventsGroupFacade, CoreAttributeGroupFacade, CoreServerAttributeGroupFacade {
    var scoped : Boolean by attributeBooleanScopedScopedEmptyd10d9f57
    var media : String by attributeStringf30f39f0
    var type : String by attributeStringf30f39f0

}

public class SUB(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("sub", consumer, initialAttributes), CommonEventsGroupFacade, CoreAttributeGroupFacade, CoreServerAttributeGroupFacade {

    override
    fun a(href : String?, target : String?, block : A.() -> Unit) : Unit = super<HTMLTag>.a(href, target, block)

    override
    fun abbr(block : ABBR.() -> Unit) : Unit = super<HTMLTag>.abbr(block)

    override
    fun area(alt : String?, content : String) : Unit = super<HTMLTag>.area(alt, content)

    override
    fun audio(block : AUDIO.() -> Unit) : Unit = super<HTMLTag>.audio(block)

    override
    fun b(block : B.() -> Unit) : Unit = super<HTMLTag>.b(block)

    override
    fun bdi(block : BDI.() -> Unit) : Unit = super<HTMLTag>.bdi(block)

    override
    fun bdo(block : BDO.() -> Unit) : Unit = super<HTMLTag>.bdo(block)

    override
    fun br(content : String) : Unit = super<HTMLTag>.br(content)

    override
    fun button(block : BUTTON.() -> Unit) : Unit = super<HTMLTag>.button(block)

    override
    fun canvas(content : String) : Unit = super<HTMLTag>.canvas(content)

    override
    fun cite(block : CITE.() -> Unit) : Unit = super<HTMLTag>.cite(block)

    override
    fun code(block : CODE.() -> Unit) : Unit = super<HTMLTag>.code(block)

    override
    fun command(content : String) : Unit = super<HTMLTag>.command(content)

    override
    fun dataList(block : DATALIST.() -> Unit) : Unit = super<HTMLTag>.dataList(block)

    override
    fun del(block : DEL.() -> Unit) : Unit = super<HTMLTag>.del(block)

    override
    fun dfn(block : DFN.() -> Unit) : Unit = super<HTMLTag>.dfn(block)

    override
    fun em(block : EM.() -> Unit) : Unit = super<HTMLTag>.em(block)

    override
    fun embed(content : String) : Unit = super<HTMLTag>.embed(content)

    override
    fun i(block : I.() -> Unit) : Unit = super<HTMLTag>.i(block)

    override
    fun iframe(content : String) : Unit = super<HTMLTag>.iframe(content)

    override
    fun img(alt : String?, src : String?, content : String) : Unit = super<HTMLTag>.img(alt, src, content)

    override
    fun input(alt : String?, content : String) : Unit = super<HTMLTag>.input(alt, content)

    override
    fun ins(block : INS.() -> Unit) : Unit = super<HTMLTag>.ins(block)

    override
    fun kbd(block : KBD.() -> Unit) : Unit = super<HTMLTag>.kbd(block)

    override
    fun keyGen(content : String) : Unit = super<HTMLTag>.keyGen(content)

    override
    fun label(block : LABEL.() -> Unit) : Unit = super<HTMLTag>.label(block)

    override
    fun link(content : String) : Unit = super<HTMLTag>.link(content)

    override
    fun map(block : MAP.() -> Unit) : Unit = super<HTMLTag>.map(block)

    override
    fun mark(block : MARK.() -> Unit) : Unit = super<HTMLTag>.mark(block)

    override
    fun math(block : MATH.() -> Unit) : Unit = super<HTMLTag>.math(block)

    override
    fun meta(content : String) : Unit = super<HTMLTag>.meta(content)

    override
    fun meter(block : METER.() -> Unit) : Unit = super<HTMLTag>.meter(block)

    override
    fun noScript(block : NOSCRIPT.() -> Unit) : Unit = super<HTMLTag>.noScript(block)

    override
    fun object_(block : OBJECT_.() -> Unit) : Unit = super<HTMLTag>.object_(block)

    override
    fun output(block : OUTPUT.() -> Unit) : Unit = super<HTMLTag>.output(block)

    override
    fun progress(block : PROGRESS.() -> Unit) : Unit = super<HTMLTag>.progress(block)

    override
    fun q(block : Q.() -> Unit) : Unit = super<HTMLTag>.q(block)

    override
    fun ruby(block : RUBY.() -> Unit) : Unit = super<HTMLTag>.ruby(block)

    override
    fun samp(block : SAMP.() -> Unit) : Unit = super<HTMLTag>.samp(block)

    override
    fun script(type : String?, src : String?, content : String) : Unit = super<HTMLTag>.script(type, src, content)

    override
    fun select(block : SELECT.() -> Unit) : Unit = super<HTMLTag>.select(block)

    override
    fun small(block : SMALL.() -> Unit) : Unit = super<HTMLTag>.small(block)

    override
    fun span(block : SPAN.() -> Unit) : Unit = super<HTMLTag>.span(block)

    override
    fun strong(block : STRONG.() -> Unit) : Unit = super<HTMLTag>.strong(block)

    override
    fun sub(block : SUB.() -> Unit) : Unit = super<HTMLTag>.sub(block)

    override
    fun sup(block : SUP.() -> Unit) : Unit = super<HTMLTag>.sup(block)

    override
    fun svg(content : String) : Unit = super<HTMLTag>.svg(content)

    override
    fun textArea(rowS : RowS?, colS : ColS?, content : String) : Unit = super<HTMLTag>.textArea(rowS, colS, content)

    override
    fun time(block : TIME.() -> Unit) : Unit = super<HTMLTag>.time(block)

    override
    fun var_(block : VAR_.() -> Unit) : Unit = super<HTMLTag>.var_(block)

    override
    fun video(block : VIDEO.() -> Unit) : Unit = super<HTMLTag>.video(block)

}

public class SUP(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("sup", consumer, initialAttributes), CommonEventsGroupFacade, CoreAttributeGroupFacade, CoreServerAttributeGroupFacade {

    override
    fun a(href : String?, target : String?, block : A.() -> Unit) : Unit = super<HTMLTag>.a(href, target, block)

    override
    fun abbr(block : ABBR.() -> Unit) : Unit = super<HTMLTag>.abbr(block)

    override
    fun area(alt : String?, content : String) : Unit = super<HTMLTag>.area(alt, content)

    override
    fun audio(block : AUDIO.() -> Unit) : Unit = super<HTMLTag>.audio(block)

    override
    fun b(block : B.() -> Unit) : Unit = super<HTMLTag>.b(block)

    override
    fun bdi(block : BDI.() -> Unit) : Unit = super<HTMLTag>.bdi(block)

    override
    fun bdo(block : BDO.() -> Unit) : Unit = super<HTMLTag>.bdo(block)

    override
    fun br(content : String) : Unit = super<HTMLTag>.br(content)

    override
    fun button(block : BUTTON.() -> Unit) : Unit = super<HTMLTag>.button(block)

    override
    fun canvas(content : String) : Unit = super<HTMLTag>.canvas(content)

    override
    fun cite(block : CITE.() -> Unit) : Unit = super<HTMLTag>.cite(block)

    override
    fun code(block : CODE.() -> Unit) : Unit = super<HTMLTag>.code(block)

    override
    fun command(content : String) : Unit = super<HTMLTag>.command(content)

    override
    fun dataList(block : DATALIST.() -> Unit) : Unit = super<HTMLTag>.dataList(block)

    override
    fun del(block : DEL.() -> Unit) : Unit = super<HTMLTag>.del(block)

    override
    fun dfn(block : DFN.() -> Unit) : Unit = super<HTMLTag>.dfn(block)

    override
    fun em(block : EM.() -> Unit) : Unit = super<HTMLTag>.em(block)

    override
    fun embed(content : String) : Unit = super<HTMLTag>.embed(content)

    override
    fun i(block : I.() -> Unit) : Unit = super<HTMLTag>.i(block)

    override
    fun iframe(content : String) : Unit = super<HTMLTag>.iframe(content)

    override
    fun img(alt : String?, src : String?, content : String) : Unit = super<HTMLTag>.img(alt, src, content)

    override
    fun input(alt : String?, content : String) : Unit = super<HTMLTag>.input(alt, content)

    override
    fun ins(block : INS.() -> Unit) : Unit = super<HTMLTag>.ins(block)

    override
    fun kbd(block : KBD.() -> Unit) : Unit = super<HTMLTag>.kbd(block)

    override
    fun keyGen(content : String) : Unit = super<HTMLTag>.keyGen(content)

    override
    fun label(block : LABEL.() -> Unit) : Unit = super<HTMLTag>.label(block)

    override
    fun link(content : String) : Unit = super<HTMLTag>.link(content)

    override
    fun map(block : MAP.() -> Unit) : Unit = super<HTMLTag>.map(block)

    override
    fun mark(block : MARK.() -> Unit) : Unit = super<HTMLTag>.mark(block)

    override
    fun math(block : MATH.() -> Unit) : Unit = super<HTMLTag>.math(block)

    override
    fun meta(content : String) : Unit = super<HTMLTag>.meta(content)

    override
    fun meter(block : METER.() -> Unit) : Unit = super<HTMLTag>.meter(block)

    override
    fun noScript(block : NOSCRIPT.() -> Unit) : Unit = super<HTMLTag>.noScript(block)

    override
    fun object_(block : OBJECT_.() -> Unit) : Unit = super<HTMLTag>.object_(block)

    override
    fun output(block : OUTPUT.() -> Unit) : Unit = super<HTMLTag>.output(block)

    override
    fun progress(block : PROGRESS.() -> Unit) : Unit = super<HTMLTag>.progress(block)

    override
    fun q(block : Q.() -> Unit) : Unit = super<HTMLTag>.q(block)

    override
    fun ruby(block : RUBY.() -> Unit) : Unit = super<HTMLTag>.ruby(block)

    override
    fun samp(block : SAMP.() -> Unit) : Unit = super<HTMLTag>.samp(block)

    override
    fun script(type : String?, src : String?, content : String) : Unit = super<HTMLTag>.script(type, src, content)

    override
    fun select(block : SELECT.() -> Unit) : Unit = super<HTMLTag>.select(block)

    override
    fun small(block : SMALL.() -> Unit) : Unit = super<HTMLTag>.small(block)

    override
    fun span(block : SPAN.() -> Unit) : Unit = super<HTMLTag>.span(block)

    override
    fun strong(block : STRONG.() -> Unit) : Unit = super<HTMLTag>.strong(block)

    override
    fun sub(block : SUB.() -> Unit) : Unit = super<HTMLTag>.sub(block)

    override
    fun sup(block : SUP.() -> Unit) : Unit = super<HTMLTag>.sup(block)

    override
    fun svg(content : String) : Unit = super<HTMLTag>.svg(content)

    override
    fun textArea(rowS : RowS?, colS : ColS?, content : String) : Unit = super<HTMLTag>.textArea(rowS, colS, content)

    override
    fun time(block : TIME.() -> Unit) : Unit = super<HTMLTag>.time(block)

    override
    fun var_(block : VAR_.() -> Unit) : Unit = super<HTMLTag>.var_(block)

    override
    fun video(block : VIDEO.() -> Unit) : Unit = super<HTMLTag>.video(block)

}

public class SVG(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("svg", consumer, initialAttributes), CommonEventsGroupFacade, CoreAttributeGroupFacade, CoreServerAttributeGroupFacade {

}


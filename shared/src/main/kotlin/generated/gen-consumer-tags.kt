package html4k

import html4k.*
import html4k.impl.*
import html4k.attributes.*

/*******************************************************************************
    DO NOT EDIT
    This file was generated by module generate
*******************************************************************************/

public fun <T, C : TagConsumer<T>> C.a(href : String? = null, target : String? = null, classes : String? = null, block : A.() -> Unit = {}) : T = A(listOf("href" to href,"target" to target,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.abbr(classes : String? = null, block : ABBR.() -> Unit = {}) : T = ABBR(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.address(classes : String? = null, block : ADDRESS.() -> Unit = {}) : T = ADDRESS(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.area(shape : AreaShape? = null, alt : String? = null, classes : String? = null, block : AREA.() -> Unit = {}) : T = AREA(listOf("Shape" to shape?.enumEncode(),"alt" to alt,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.article(classes : String? = null, block : ARTICLE.() -> Unit = {}) : T = ARTICLE(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.aside(classes : String? = null, block : ASIDE.() -> Unit = {}) : T = ASIDE(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.audio(classes : String? = null, block : AUDIO.() -> Unit = {}) : T = AUDIO(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.b(classes : String? = null, block : B.() -> Unit = {}) : T = B(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.base(classes : String? = null, block : BASE.() -> Unit = {}) : T = BASE(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.bdi(classes : String? = null, block : BDI.() -> Unit = {}) : T = BDI(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.bdo(classes : String? = null, block : BDO.() -> Unit = {}) : T = BDO(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.blockQuote(classes : String? = null, block : BLOCKQUOTE.() -> Unit = {}) : T = BLOCKQUOTE(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.body(classes : String? = null, block : BODY.() -> Unit = {}) : T = BODY(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.br(classes : String? = null, block : BR.() -> Unit = {}) : T = BR(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.button(formEncType : ButtonFormEncType? = null, formMethod : ButtonFormMethod? = null, type : ButtonType? = null, classes : String? = null, block : BUTTON.() -> Unit = {}) : T = BUTTON(listOf("formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"type" to type?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.canvas(classes : String? = null, content : String = "") : T = CANVAS(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, {+content})
public fun <T, C : TagConsumer<T>> C.canvas(classes : String? = null, block : CANVAS.() -> Unit = {}) : T = CANVAS(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.caption(classes : String? = null, block : CAPTION.() -> Unit = {}) : T = CAPTION(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.cite(classes : String? = null, block : CITE.() -> Unit = {}) : T = CITE(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.code(classes : String? = null, block : CODE.() -> Unit = {}) : T = CODE(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.col(classes : String? = null, block : COL.() -> Unit = {}) : T = COL(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.colGroup(classes : String? = null, block : COLGROUP.() -> Unit = {}) : T = COLGROUP(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.command(type : CommandType? = null, classes : String? = null, block : COMMAND.() -> Unit = {}) : T = COMMAND(listOf("type" to type?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.dataList(classes : String? = null, block : DATALIST.() -> Unit = {}) : T = DATALIST(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.dd(classes : String? = null, block : DD.() -> Unit = {}) : T = DD(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.del(classes : String? = null, block : DEL.() -> Unit = {}) : T = DEL(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.details(classes : String? = null, block : DETAILS.() -> Unit = {}) : T = DETAILS(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.dfn(classes : String? = null, block : DFN.() -> Unit = {}) : T = DFN(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.dialog(classes : String? = null, block : DIALOG.() -> Unit = {}) : T = DIALOG(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.div(classes : String? = null, block : DIV.() -> Unit = {}) : T = DIV(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.dl(classes : String? = null, block : DL.() -> Unit = {}) : T = DL(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.dt(classes : String? = null, block : DT.() -> Unit = {}) : T = DT(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.em(classes : String? = null, block : EM.() -> Unit = {}) : T = EM(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.embed(classes : String? = null, block : EMBED.() -> Unit = {}) : T = EMBED(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.fieldSet(classes : String? = null, block : FIELDSET.() -> Unit = {}) : T = FIELDSET(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.figure(classes : String? = null, block : FIGURE.() -> Unit = {}) : T = FIGURE(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.footer(classes : String? = null, block : FOOTER.() -> Unit = {}) : T = FOOTER(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.form(action : String? = null, encType : FormEncType? = null, method : FormMethod? = null, classes : String? = null, block : FORM.() -> Unit = {}) : T = FORM(listOf("action" to action,"enctype" to encType?.enumEncode(),"method" to method?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.h1(classes : String? = null, block : H1.() -> Unit = {}) : T = H1(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.h2(classes : String? = null, block : H2.() -> Unit = {}) : T = H2(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.h3(classes : String? = null, block : H3.() -> Unit = {}) : T = H3(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.h4(classes : String? = null, block : H4.() -> Unit = {}) : T = H4(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.h5(classes : String? = null, block : H5.() -> Unit = {}) : T = H5(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.h6(classes : String? = null, block : H6.() -> Unit = {}) : T = H6(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.head(block : HEAD.() -> Unit = {}) : T = HEAD(emptyMap, this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.header(classes : String? = null, block : HEADER.() -> Unit = {}) : T = HEADER(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.hGroup(classes : String? = null, block : HGROUP.() -> Unit = {}) : T = HGROUP(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.hr(classes : String? = null, block : HR.() -> Unit = {}) : T = HR(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.html(block : HTML.() -> Unit = {}) : T = HTML(emptyMap, this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.i(classes : String? = null, block : I.() -> Unit = {}) : T = I(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.iframe(sandbox : IframeSandbox? = null, classes : String? = null, content : String = "") : T = IFRAME(listOf("sandbox" to sandbox?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, {+content})
public fun <T, C : TagConsumer<T>> C.iframe(sandbox : IframeSandbox? = null, classes : String? = null, block : IFRAME.() -> Unit = {}) : T = IFRAME(listOf("sandbox" to sandbox?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.img(alt : String? = null, src : String? = null, classes : String? = null, block : IMG.() -> Unit = {}) : T = IMG(listOf("alt" to alt,"src" to src,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.input(type : InputType? = null, formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : T = INPUT(listOf("type" to type?.enumEncode(),"formenctype" to formEncType?.enumEncode(),"formmethod" to formMethod?.enumEncode(),"name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.ins(classes : String? = null, block : INS.() -> Unit = {}) : T = INS(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.kbd(classes : String? = null, block : KBD.() -> Unit = {}) : T = KBD(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.keyGen(keyType : KeyGenKeyType? = null, classes : String? = null, block : KEYGEN.() -> Unit = {}) : T = KEYGEN(listOf("keytype" to keyType?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.label(classes : String? = null, block : LABEL.() -> Unit = {}) : T = LABEL(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.legEnd(classes : String? = null, block : LEGEND.() -> Unit = {}) : T = LEGEND(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.li(classes : String? = null, block : LI.() -> Unit = {}) : T = LI(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.link(href : String? = null, rel : String? = null, block : LINK.() -> Unit = {}) : T = LINK(listOf("href" to href,"rel" to rel).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.map(name : String? = null, classes : String? = null, block : MAP.() -> Unit = {}) : T = MAP(listOf("name" to name,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.mark(classes : String? = null, block : MARK.() -> Unit = {}) : T = MARK(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.math(classes : String? = null, block : MATH.() -> Unit = {}) : T = MATH(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.mathml(classes : String? = null, content : String = "") : T = MATHML(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, {+content})
public fun <T, C : TagConsumer<T>> C.mathml(classes : String? = null, block : MATHML.() -> Unit = {}) : T = MATHML(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.menu(type : MenuType? = null, classes : String? = null, block : MENU.() -> Unit = {}) : T = MENU(listOf("type" to type?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.meta(name : String? = null, content : String? = null, block : META.() -> Unit = {}) : T = META(listOf("name" to name,"content" to content).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.meter(classes : String? = null, block : METER.() -> Unit = {}) : T = METER(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.nav(classes : String? = null, block : NAV.() -> Unit = {}) : T = NAV(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.noScript(classes : String? = null, block : NOSCRIPT.() -> Unit = {}) : T = NOSCRIPT(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.object_(classes : String? = null, block : OBJECT_.() -> Unit = {}) : T = OBJECT_(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.ol(classes : String? = null, block : OL.() -> Unit = {}) : T = OL(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.optGroup(label : String? = null, classes : String? = null, block : OPTGROUP.() -> Unit = {}) : T = OPTGROUP(listOf("label" to label,"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.option(classes : String? = null, content : String = "") : T = OPTION(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, {+content})
public fun <T, C : TagConsumer<T>> C.option(classes : String? = null, block : OPTION.() -> Unit = {}) : T = OPTION(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.output(classes : String? = null, block : OUTPUT.() -> Unit = {}) : T = OUTPUT(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.p(classes : String? = null, block : P.() -> Unit = {}) : T = P(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.param(name : String? = null, value : String? = null, block : PARAM.() -> Unit = {}) : T = PARAM(listOf("name" to name,"value" to value).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.pre(classes : String? = null, block : PRE.() -> Unit = {}) : T = PRE(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.progress(classes : String? = null, block : PROGRESS.() -> Unit = {}) : T = PROGRESS(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.q(classes : String? = null, block : Q.() -> Unit = {}) : T = Q(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.rp(classes : String? = null, block : RP.() -> Unit = {}) : T = RP(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.rt(classes : String? = null, block : RT.() -> Unit = {}) : T = RT(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.ruby(classes : String? = null, block : RUBY.() -> Unit = {}) : T = RUBY(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.samp(classes : String? = null, block : SAMP.() -> Unit = {}) : T = SAMP(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.script(type : ScriptType? = null, src : String? = null, content : String = "") : T = SCRIPT(listOf("type" to type?.enumEncode(),"src" to src).toAttributesMap(), this).visitAndFinalize(this, {+content})
public fun <T, C : TagConsumer<T>> C.script(type : ScriptType? = null, src : String? = null, block : SCRIPT.() -> Unit = {}) : T = SCRIPT(listOf("type" to type?.enumEncode(),"src" to src).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.section(classes : String? = null, block : SECTION.() -> Unit = {}) : T = SECTION(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.select(classes : String? = null, block : SELECT.() -> Unit = {}) : T = SELECT(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.small(classes : String? = null, block : SMALL.() -> Unit = {}) : T = SMALL(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.source(classes : String? = null, block : SOURCE.() -> Unit = {}) : T = SOURCE(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.span(classes : String? = null, block : SPAN.() -> Unit = {}) : T = SPAN(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.strong(classes : String? = null, block : STRONG.() -> Unit = {}) : T = STRONG(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.style(type : String? = null, content : String = "") : T = STYLE(listOf("type" to type).toAttributesMap(), this).visitAndFinalize(this, {+content})
public fun <T, C : TagConsumer<T>> C.style(type : String? = null, block : STYLE.() -> Unit = {}) : T = STYLE(listOf("type" to type).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.sub(classes : String? = null, block : SUB.() -> Unit = {}) : T = SUB(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.sup(classes : String? = null, block : SUP.() -> Unit = {}) : T = SUP(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.svg(classes : String? = null, content : String = "") : T = SVG(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, {+content})
public fun <T, C : TagConsumer<T>> C.svg(classes : String? = null, block : SVG.() -> Unit = {}) : T = SVG(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.table(classes : String? = null, block : TABLE.() -> Unit = {}) : T = TABLE(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.tbody(classes : String? = null, block : TBODY.() -> Unit = {}) : T = TBODY(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.td(classes : String? = null, block : TD.() -> Unit = {}) : T = TD(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.textArea(rows : String? = null, cols : String? = null, wrap : TextAreaWrap? = null, classes : String? = null, content : String = "") : T = TEXTAREA(listOf("rows" to rows,"cols" to cols,"wrap" to wrap?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, {+content})
public fun <T, C : TagConsumer<T>> C.textArea(rows : String? = null, cols : String? = null, wrap : TextAreaWrap? = null, classes : String? = null, block : TEXTAREA.() -> Unit = {}) : T = TEXTAREA(listOf("rows" to rows,"cols" to cols,"wrap" to wrap?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.tfoot(classes : String? = null, block : TFOOT.() -> Unit = {}) : T = TFOOT(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.th(scope : ThScope? = null, classes : String? = null, block : TH.() -> Unit = {}) : T = TH(listOf("scope" to scope?.enumEncode(),"class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.thead(classes : String? = null, block : THEAD.() -> Unit = {}) : T = THEAD(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.time(classes : String? = null, block : TIME.() -> Unit = {}) : T = TIME(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.title(content : String = "") : T = TITLE(emptyMap, this).visitAndFinalize(this, {+content})
public fun <T, C : TagConsumer<T>> C.title(block : TITLE.() -> Unit = {}) : T = TITLE(emptyMap, this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.tr(classes : String? = null, block : TR.() -> Unit = {}) : T = TR(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.ul(classes : String? = null, block : UL.() -> Unit = {}) : T = UL(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.var_(classes : String? = null, block : VAR_.() -> Unit = {}) : T = VAR_(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)

public fun <T, C : TagConsumer<T>> C.video(classes : String? = null, block : VIDEO.() -> Unit = {}) : T = VIDEO(listOf("class" to stringSetDecode(classes)?.stringSetEncode()).toAttributesMap(), this).visitAndFinalize(this, block)


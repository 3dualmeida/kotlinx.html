package html4k

import html4k.*
import html4k.impl.*

/*******************************************************************************
    DO NOT EDIT
    This file was generated by module generate
*******************************************************************************/

public class DIV(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("div", consumer, initialAttributes) {
    var classes : String by StringAttribute("class")

    override
    fun div(classes : String?, block : DIV.() -> Unit) : Unit = super.div(classes, block)

    override
    fun p(block : P.() -> Unit) : Unit = super.p(block)

    override
    fun a(href : String?, target : Targets?, block : A.() -> Unit) : Unit = super.a(href, target, block)

    override
    fun span(block : SPAN.() -> Unit) : Unit = super.span(block)

}
public class P(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("p", consumer, initialAttributes) {

    override
    fun a(href : String?, target : Targets?, block : A.() -> Unit) : Unit = super.a(href, target, block)

    override
    fun p(block : P.() -> Unit) : Unit = super.p(block)

    override
    fun span(block : SPAN.() -> Unit) : Unit = super.span(block)

}
public class HEAD(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("head", consumer, initialAttributes) {

    override
    fun title(content : String) : Unit = super.title(content)

}
public class A(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("a", consumer, initialAttributes) {
    var href : String by StringAttribute("href")
    var target : Targets by EnumAttribute("target", targetsValues)

    override
    fun span(block : SPAN.() -> Unit) : Unit = super.span(block)

}
public class HTML(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("html", consumer, initialAttributes) {

    override
    fun head(block : HEAD.() -> Unit) : Unit = super.head(block)

    override
    fun body(block : BODY.() -> Unit) : Unit = super.body(block)

}
public class BODY(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("body", consumer, initialAttributes) {

    override
    fun div(classes : String?, block : DIV.() -> Unit) : Unit = super.div(classes, block)

    override
    fun p(block : P.() -> Unit) : Unit = super.p(block)

    override
    fun a(href : String?, target : Targets?, block : A.() -> Unit) : Unit = super.a(href, target, block)

    override
    fun span(block : SPAN.() -> Unit) : Unit = super.span(block)

}
public class TITLE(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("title", consumer, initialAttributes) {

}
public class SPAN(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("span", consumer, initialAttributes) {

    override
    fun span(block : SPAN.() -> Unit) : Unit = super.span(block)

}
